(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{373:function(n,e,a){"use strict";a.r(e);var t=a(12),s=Object(t.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/imagesimage-20220919231733835.png",alt:"image-20220919231733835"}})]),n._v(" "),e("blockquote",[e("p",[n._v("Spring中包含了以上模块，主要用到了以下几种设计模式")]),n._v(" "),e("ul",[e("li",[e("p",[n._v("工厂模式：BeanFactory就是简单工厂模式的体现，用来创建对象的实例；")])]),n._v(" "),e("li",[e("p",[n._v("单例模式：Bean默认为单例模式。")])]),n._v(" "),e("li",[e("p",[n._v("代理模式：Spring的AOP功能用到了JDK的动态代理和CGLIB字节码生成技术；")])]),n._v(" "),e("li",[e("p",[n._v("模板方法：用来解决代码重复的问题。比如. RestTemplate, JmsTemplate, JpaTemplate。")])]),n._v(" "),e("li",[e("p",[n._v("观察者模式：定义对象键一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知被制动更新，如Spring中listener的实现–ApplicationListener。")])])])]),n._v(" "),e("h2",{attrs:{id:"一、基础信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、基础信息"}},[n._v("#")]),n._v(" 一、基础信息")]),n._v(" "),e("h4",{attrs:{id:"bean的定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bean的定义"}},[n._v("#")]),n._v(" bean的定义")]),n._v(" "),e("ul",[e("li",[n._v("Bean是一个被"),e("code",[n._v("实例化")]),n._v("、"),e("code",[n._v("组装")]),n._v("、并被"),e("code",[n._v("Spring容器所管理")]),n._v("的对象，是由容器提供的"),e("code",[n._v("配置元数据")]),n._v("（如bean.xml）创建的。（下图是Bean与Spring容器的关系）")])]),n._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/images60699678-98f14380-9f27-11e9-8e33-f0edb056166c.png",alt:"image"}})]),n._v(" "),e("p"),n._v(" "),e("h4",{attrs:{id:"bean的三种元数据配置-bean的创建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bean的三种元数据配置-bean的创建"}},[n._v("#")]),n._v(" bean的三种元数据配置（bean的创建）")]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://blog.csdn.net/isea533/article/details/78072133",target:"_blank",rel:"noopener noreferrer"}},[n._v("参考"),e("OutboundLink")],1)])]),n._v(" "),e("ol",[e("li",[n._v("基于XML的配置")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<beans>\n    <bean name="" class=""></bean>\n</beans>\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("ol",{attrs:{start:"2"}},[e("li",[n._v("基于注解的配置")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("@Component\npublic class MyBeanConfig {\n\n    @Autowired\n    private Country country;\n\n    @Bean\n    public Country country(){\n        return new Country();\n    }\n\n    @Bean\n    public UserInfo userInfo(){\n        return new UserInfo(country);\n    }\n\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br")])]),e("ol",{attrs:{start:"3"}},[e("li",[n._v("基于Java的配置（"),e("code",[n._v("@Configuration")]),n._v("实现自动依赖注入，且通过代理操作，而"),e("code",[n._v("@Component")]),n._v("则没有代理，且需要加上"),e("code",[n._v("@Autowired")]),n._v("，否则两个方法返回的是不同的实例）")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("@Configuration\npublic class MyBeanConfig {\n\n    @Bean\n    public Country country(){\n        return new Country();\n    }\n\n    @Bean\n    public UserInfo userInfo(){\n        return new UserInfo(country());\n    }\n\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br")])]),e("h4",{attrs:{id:"bean的作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bean的作用域"}},[n._v("#")]),n._v(" bean的作用域")]),n._v(" "),e("p",[n._v("（可通过Xml的"),e("code",[n._v("scope")]),n._v("属性及"),e("code",[n._v("@Scope")]),n._v("注解进行配置）")]),n._v(" "),e("ul",[e("li",[n._v("singleton")]),n._v(" "),e("li",[n._v("prototype")]),n._v(" "),e("li",[n._v("request")]),n._v(" "),e("li",[n._v("session")]),n._v(" "),e("li",[n._v("global-session")])]),n._v(" "),e("h2",{attrs:{id:"二、生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、生命周期"}},[n._v("#")]),n._v(" 二、生命周期")]),n._v(" "),e("ul",[e("li",[n._v("转自： "),e("a",{attrs:{href:"https://www.zhihu.com/question/38597960/answer/77600561",target:"_blank",rel:"noopener noreferrer"}},[n._v("链接"),e("OutboundLink")],1)])]),n._v(" "),e("blockquote",[e("p",[n._v("Bean的生命周期看起来很复杂，其核心过程主要包括：")]),n._v(" "),e("ul",[e("li",[n._v("Bean元信息加载")]),n._v(" "),e("li",[n._v("Bean实例化")]),n._v(" "),e("li",[n._v("Bean属性填充")]),n._v(" "),e("li",[n._v("Bean初始化")]),n._v(" "),e("li",[n._v("Bena的使用")]),n._v(" "),e("li",[n._v("Bean的销毁")])]),n._v(" "),e("p",[n._v("除了上述的核心流程外，Spring还提供了多个钩子，可以辅助对其周期数据进行修改和获取，主要有以下几个：")]),n._v(" "),e("ul",[e("li",[n._v("Aware获取BeanName、ApplicationContext，BeanFactory")]),n._v(" "),e("li",[n._v("@PostContract、init-method初始化")]),n._v(" "),e("li",[n._v("@PreDestory销毁前的资源关闭")])])]),n._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/images60722728-5c900880-9f64-11e9-8789-b0b574e5e29b.png",alt:"image"}})]),n._v(" "),e("ul",[e("li",[e("p",[n._v("1、Spring对Bean进行"),e("code",[n._v("实例化")]),n._v("（相当于程序中的new Xx()，"),e("code",[n._v("反射实现")]),n._v("）")])]),n._v(" "),e("li",[e("p",[n._v("2、Spring将值和Bean的"),e("code",[n._v("引用注入")]),n._v("进Bean对应的属性中（"),e("code",[n._v("反射实现")]),n._v("）")])]),n._v(" "),e("li",[e("p",[n._v("3、如果Bean实现了BeanNameAware接口，Spring将Bean的ID传递给"),e("code",[n._v("setBeanName()")]),n._v("方法（实现BeanNameAware清主要是为了通过Bean的引用来获得Bean的ID，一般业务中是很少有用到Bean的ID的）")])]),n._v(" "),e("li",[e("p",[n._v("4、如果Bean实现了BeanFactoryAware接口，Spring将"),e("code",[n._v("调用setBeanFactory")]),n._v("(BeanFactory bf)方法并把BeanFactory容器实例作为参数传入。（实现BeanFactoryAware 主要目的是为了获取Spring容器，如Bean通过Spring容器发布事件等）")])]),n._v(" "),e("li",[e("p",[n._v("5、如果Bean实现了ApplicationContextAwaer接口，Spring容器将"),e("code",[n._v("调用setApplicationContext")]),n._v("(ApplicationContext ctx)方法，把应用上下文作为参数传入.(作用与BeanFactory类似都是为了获取Spring容器，不同的是Spring容器在调用setApplicationContext方法时会把它自己作为setApplicationContext 的参数传入，而Spring容器在调用setBeanDactory前需要程序员自己指定（注入）setBeanDactory里的参数BeanFactory )")])]),n._v(" "),e("li",[e("p",[n._v("6、如果Bean实现了BeanPostProcess接口，Spring将调用它们的"),e("code",[n._v("postProcessBeforeInitialization（预初始化）方法")]),n._v("（作用是在Bean实例创建成功后对进行增强处理，如对Bean进行修改，增加某个功能）")])]),n._v(" "),e("li",[e("p",[n._v("7、如果Bean实现了InitializingBean接口，Spring将调用它们的"),e("code",[n._v("afterPropertiesSet")]),n._v("方法，作用与在配置文件中对Bean使用"),e("code",[n._v("init-method")]),n._v("声明初始化的作用一样，都是在Bean的"),e("code",[n._v("全部属性设置成功后执行")]),n._v("的初始化方法。")])]),n._v(" "),e("li",[e("p",[n._v("8、如果Bean实现了BeanPostProcess接口，Spring将调用它们的"),e("code",[n._v("postProcessAfterInitialization（后初始化）方法")]),n._v("（作用与第六步的一样，只不过是在Bean初始化前执行的，而这个是在"),e("code",[n._v("Bean初始化后")]),n._v("执行的，时机不同 )")])]),n._v(" "),e("li",[e("p",[n._v("9、经过以上的工作后，Bean将"),e("code",[n._v("一直驻留")]),n._v("在应用上下文中给应用使用，直到应用上下文被销毁")])]),n._v(" "),e("li",[e("p",[n._v("10、如果Bean实现了DispostbleBean接口，Spring将调用它的"),e("code",[n._v("destory")]),n._v("方法，作用与在配置文件中对Bean使用"),e("code",[n._v("destory-method")]),n._v("属性的作用一样，都是在Bean实例销毁前执行的方法。")])])]),n._v(" "),e("p",[n._v("综合上面十个步骤，可以简化为："),e("code",[n._v("Bean实例的创建、Bean属性的注入、Bean相关Aware接口的实现，Bean实例调用前的初始化、Bean实例的调用、Bean实例销毁前的初始化、Bean实例的销毁")])]),n._v(" "),e("h2",{attrs:{id:"三、循环依赖处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、循环依赖处理"}},[n._v("#")]),n._v(" 三、循环依赖处理")]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://juejin.cn/post/6882266649509298189",target:"_blank",rel:"noopener noreferrer"}},[n._v("*参考一"),e("OutboundLink")],1)])]),n._v(" "),e("p",[e("strong",[n._v("如何解决循环依赖问题？")])]),n._v(" "),e("blockquote",[e("p",[n._v("Spring采用三级缓存解决循环依赖问题，缓存本质上就是为了提前暴露Bean（半成品），避免循环依赖导致的死循环问题。")]),n._v(" "),e("table",[e("thead",[e("tr",[e("th",[n._v("名称")]),n._v(" "),e("th",[n._v("描述")])])]),n._v(" "),e("tbody",[e("tr",[e("td",[n._v("singletonObjects")]),n._v(" "),e("td",[n._v("一级缓存，存放完整的 Bean。")])]),n._v(" "),e("tr",[e("td",[n._v("earlySingletonObjects")]),n._v(" "),e("td",[n._v("二级缓存，存放提前暴露的Bean，Bean 是不完整的，未完成属性注入和执行 init 方法。")])]),n._v(" "),e("tr",[e("td",[n._v("singletonFactories")]),n._v(" "),e("td",[n._v("三级缓存，存放的是 Bean 工厂，主要是生产 Bean，存放到二级缓存中。")])])])]),n._v(" "),e("p",[n._v("A、B循环依赖的处理过程：")]),n._v(" "),e("ol",[e("li",[n._v("实例化 A，此时 A 还未完成属性填充和初始化方法（@PostConstruct）的执行，A 只是一个半成品。")]),n._v(" "),e("li",[n._v("为 A 创建一个 Bean 工厂，并放入到 singletonFactories 中。")]),n._v(" "),e("li",[n._v("发现 A 需要注入 B 对象，但是一级、二级、三级缓存均为发现对象 B。")]),n._v(" "),e("li",[n._v("实例化 B，此时 B 还未完成属性填充和初始化方法（@PostConstruct）的执行，B 只是一个半成品。")]),n._v(" "),e("li",[n._v("为 B 创建一个 Bean 工厂，并放入到 singletonFactories 中。")]),n._v(" "),e("li",[n._v("发现 B 需要注入 A 对象，此时在一级、二级未发现对象 A，但是在三级缓存中发现了对象 A，从三级缓存中得到对象 A，并将对象 A 放入二级缓存中，同时删除三级缓存中的对象 A。（注意，此时的 A 还是一个半成品，并没有完成属性填充和执行初始化方法）")]),n._v(" "),e("li",[n._v("将对象 A 注入到对象 B 中。")]),n._v(" "),e("li",[n._v("对象 B 完成属性填充，执行初始化方法，并放入到一级缓存中，同时删除二级缓存中的对象 B。（此时对象 B 已经是一个成品）")]),n._v(" "),e("li",[n._v("对象 A 得到对象 B，将对象 B 注入到对象 A 中。（对象 A 得到的是一个完整的对象 B）")]),n._v(" "),e("li",[n._v("对象 A 完成属性填充，执行初始化方法，并放入到一级缓存中，同时删除二级缓存中的对象 A。")])])]),n._v(" "),e("p",[e("strong",[n._v("为什么需要三级缓存？")])]),n._v(" "),e("blockquote",[e("p",[e("a",{attrs:{href:"https://juejin.cn/post/6882266649509298189",target:"_blank",rel:"noopener noreferrer"}},[n._v("*参考"),e("OutboundLink")],1)]),n._v(" "),e("p",[n._v("Spring的三级缓存存放的是创建Bean的工厂实例（该实例可以提前创建代理对象），是为了解决AOP代理问题，通常的情况下，Spring Bean在完成初始化后开始为其创建代理对象，而在循环依赖过程中，依赖的对象并没有完成实例化，如果直接注入，那么注入的是普通Bean而"),e("strong",[n._v("非代理Bean")]),n._v("，所以"),e("strong",[n._v("第三级缓存就是为了提前创建及暴露代理对象")]),n._v("。")]),n._v(" "),e("p",[n._v("（当然，如果将代理对象的创建过程提前，则可以不需要第三级缓存，直接将创建的代理对象半成品放入二级缓存即可）")])])])}),[],!1,null,null,null);e.default=s.exports}}]);