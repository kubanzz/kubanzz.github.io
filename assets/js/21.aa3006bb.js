(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{348:function(t,a,v){"use strict";v.r(a);var l=v(12),e=Object(l.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"一、初识volatile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、初识volatile"}},[t._v("#")]),t._v(" 一、初识Volatile")]),t._v(" "),a("h4",{attrs:{id:"what"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what"}},[t._v("#")]),t._v(" what")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("volatile")]),t._v("是Java语言提供的一种"),a("strong",[t._v("较弱的同步机制")]),t._v("，用来确保将变量的更新操作通知到其他线程，"),a("code",[t._v("volatile")]),t._v("修饰的变量具有"),a("strong",[t._v("可见性")]),t._v("和"),a("strong",[t._v("有序性")]),t._v("，即变量的修改不会被缓存在寄存器或者其他高速缓存器中（可见），并且不会被遍历器和处理器"),a("strong",[t._v("指令重排")]),t._v("（有序）。"),a("code",[t._v("synchronize")]),t._v("提供了"),a("strong",[t._v("原子性")]),t._v("和"),a("strong",[t._v("可见性")]),t._v("，与"),a("code",[t._v("synchronize")]),t._v("相比，"),a("code",[t._v("volatile")]),t._v("不保证原子性，所以在多线程并发情况下仍可能会出现线程安全问题，另外两者的"),a("strong",[t._v("有序性")]),t._v("也是不一样的，"),a("code",[t._v("volatile")]),t._v("的有序性是禁止指令重排，而"),a("code",[t._v("synchronize")]),t._v("的有序性是建立在同步之上的，就是说保证单线程执行，并且同步区域的变量会被写入主存（对其他线程可见），但是同步区域仍然可以进行指令重排，这也就是DCL（双重检验锁）的问题。")])]),t._v(" "),a("h4",{attrs:{id:"where-and-why"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#where-and-why"}},[t._v("#")]),t._v(" where and why")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("volatile")]),t._v("主要应用在需要"),a("strong",[t._v("确保自身状态可见")]),t._v("和"),a("strong",[t._v("指令重排会出现问题")]),t._v("的场景，如确保所引用对象的状态可见性、标识一些重要的程序生命周期事件的发生（如初始化或关闭）。"),a("code",[t._v("volatile")]),t._v("没有加锁的消耗，因此在一些不需要加锁访问并且需要对其他线程可见的场景能提供更好的性能。\n"),a("code",[t._v("volatile")]),t._v("的使用条件：")]),t._v(" "),a("ul",[a("li",[t._v("对变量的写入操作不依赖变量的当前值，获取保证只有"),a("strong",[t._v("单线程")]),t._v("更新变量的值。")]),t._v(" "),a("li",[t._v("该变量不会与其他状态变量一起纳入不变性条件中。")]),t._v(" "),a("li",[t._v("在访问变量时"),a("strong",[t._v("不需要加锁")]),t._v("。")])])]),t._v(" "),a("h4",{attrs:{id:"how"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how"}},[t._v("#")]),t._v(" how")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("volatile")]),t._v("用于修饰共享变量，保证变量的修改在多线程间的可见性和有序性（禁止指令重排），下面的例子是"),a("strong",[t._v("单例模式")]),t._v("中的双重检验锁（DCL）模式，使用"),a("code",[t._v("volatile")]),t._v("保证要创建的对象的可见性，否则在同步代码块中，对象的"),a("code",[t._v("new")]),t._v("在底层分为多步骤进行，如：a.分配内存、b.初始化对象、c.对象引用指向内存区域，由于同步代码块中可以进行"),a("strong",[t._v("指令重排")]),t._v("（由abc变成acb，可参考笔者的另一篇博客"),a("code",[t._v("Java并发基础")]),t._v("），其他线程在判断对象不为空时对象可能还没初始化，获取到的是空的对象，由此造成安全问题。")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("public class Singleton {\n\n    private static volatile Singleton singleton;\n\n    private Singleton(){\n\n    }\n\n    public static Singleton getInstance(){\n        if(singleton != null){\n            synchronized (Singleton.class){\n                if (singleton != null){\n                    // 可能会有指令重排\n                    singleton = new Singleton();\n                }\n            }\n        }\n        return singleton;\n    }\n\n}\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br")])]),a("p"),t._v(" "),a("h2",{attrs:{id:"二、volatile的底层原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、volatile的底层原理"}},[t._v("#")]),t._v(" 二、Volatile的底层原理")]),t._v(" "),a("blockquote",[a("p",[t._v("JMM（Java内存模型）定义了volatile的内存语义，当一个变量声明为volatile时，它的读写操作将具有特殊的含义。")])]),t._v(" "),a("h3",{attrs:{id:"volatile内存语义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volatile内存语义"}},[t._v("#")]),t._v(" volatile内存语义")]),t._v(" "),a("p",[a("strong",[t._v("可见性的内存语义")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("写的内存语义")]),t._v("：当写一个volatile变量时，JMM会把该线程对应的本地内存中的共享变量值刷新到主内存。其他线程在监听到总线对该内存地址的写入后，如果他们的对该地址内存的缓存状态为S，则让缓存失效并置为I。")]),t._v(" "),a("li",[a("strong",[t._v("读的内存语义")]),t._v("：当读一个volatile变量时，由于volatile写入时"),a("code",[t._v("MESI")]),t._v("协议会把该线程对应的本地内存置为无效，线程接下来从主内存中读取共享变量。")])]),t._v(" "),a("p",[a("strong",[t._v("可见性的内存语义实现")])]),t._v(" "),a("ul",[a("li",[t._v("如果对声明了volatile的变量进行写操作，JVM就会向处理器发送一条"),a("code",[t._v("Lock")]),t._v("前缀的指令，该指令将变量所在缓存行的数据写回系统内存。但是即使内存被写回，缓存在其他处理器上的数据仍然是旧数据，在多核处理器下，为了保证各个处理器的缓存是一致的，CPU厂商制定了"),a("strong",[t._v("缓存一致性协议")]),t._v("，"),a("strong",[t._v("每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了")]),t._v("，当处理器发现自己缓存行的内存地址被修改，就会将当前处理器的缓存行设置为无效（仅仅设置为无效，不会直接更新），当需要数据的时候发现缓存行状态为无效，则从主存中读取。")])]),t._v(" "),a("p",[a("strong",[t._v("有序性的内存语义")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("volatile读")]),t._v("：volatile读之后的操作不会被重排序到volatile读之前")]),t._v(" "),a("li",[a("strong",[t._v("volatile写")]),t._v("：volatile写之前的操作不会被重排到volatile之后")]),t._v(" "),a("li",[a("strong",[t._v("先volatile写-后volatile读")]),t._v("：不可重排序")])]),t._v(" "),a("p",[a("strong",[t._v("有序性的内存语义实现")])]),t._v(" "),a("blockquote",[a("p",[t._v("通过"),a("strong",[t._v("对编译器和处理器的重排序的限制")]),t._v("，从而实现了volatile的内存语义。")])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("对编译器重排序的限制")])]),t._v(" "),a("ul",[a("li",[t._v("为了实现"),a("code",[t._v("volatile")]),t._v("的内存语义，在编译器生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的"),a("strong",[t._v("处理器排序")]),t._v("。\n"),a("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/images0061iV1igy1ga30gtwmkzj30ou0giab4.jpg",alt:"image.png"}})])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("对处理器重排序的限制")]),t._v(" "),a("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/images0061iV1igy1ga30hpgonvj30p00jawgg.jpg",alt:"image.png"}})]),t._v(" "),a("ul",[a("li",[t._v("对于编译器来说，发现一个最优布置来最小化插入屏障的总数几乎是不可能的，为此，JMM采取了保守策略（即"),a("strong",[t._v("在volatile写的前面和后面分别插入内存屏障，在volatile读操作后面插入两个内存屏障")]),t._v("）：\n"),a("ul",[a("li",[a("ol",[a("li",[t._v("在在每个volatile写操作的前面插入一个StoreStore屏障；")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("在每个volatile写操作的后面插入一个StoreLoad屏障；")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("在每个volatile读操作的后面插入一个LoadLoad屏障；")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[t._v("在每个volatile读操作的后面插入一个LoadStore屏障。")])])])])]),t._v(" "),a("li",[t._v("屏障的作用：\n"),a("ul",[a("li",[a("strong",[t._v("StoreStore屏障")]),t._v("：禁止上面的普通写和下面的volatile写重排序；")]),t._v(" "),a("li",[a("strong",[t._v("StoreLoad屏障")]),t._v("：防止上面的volatile写与下面可能有的volatile读/写重排序")]),t._v(" "),a("li",[a("strong",[t._v("LoadLoad屏障")]),t._v("：禁止下面所有的普通读操作和上面的volatile读重排序")]),t._v(" "),a("li",[a("strong",[t._v("LoadStore屏障")]),t._v("：禁止下面所有的普通写操作和上面的volatile读重排序")])])]),t._v(" "),a("li",[t._v("《Java并发编程艺术》书中例图")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/images0061iV1igy1ga5vosa32cj30h80anq4c.jpg",alt:"image.png"}}),t._v(" "),a("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/images0061iV1igy1ga5vprufguj30h809vgmv.jpg",alt:"image.png"}})])])]),t._v(" "),a("p"),t._v(" "),a("h2",{attrs:{id:"三、总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、总结"}},[t._v("#")]),t._v(" 三、总结")]),t._v(" "),a("blockquote",[a("p",[t._v("扩展：虚拟机规范中，写64位的double和long分成了两次32位值的操作（非原子性），而添加了"),a("code",[t._v("volatile")]),t._v("修饰的long和double读写总是"),a("strong",[t._v("原子的")]),t._v("，读写引用也是原子的。商业JVM则不会有此问题，考虑到实际应用都实现了原子性。\n本篇博客对volatile的可见性和有序性进行了描述，并针对底层实现进行了简单总结，设计到编译器、处理器的指令重排机制及实现volatile可见性的"),a("strong",[t._v("MESI")]),t._v("缓存一致性协议、"),a("strong",[t._v("编译器Locl前缀的指令")]),t._v("和实现有序性的"),a("strong",[t._v("CPU内存屏障")]),t._v("，内容主要总结自其他大佬博客及个人理解，有不正确的地方希望大家指出。")])]),t._v(" "),a("p"),t._v(" "),a("p",[a("strong",[t._v("参考")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.im/post/5ae9b41b518825670b33e6c4#heading-1",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考一"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://gorden5566.com/post/1018",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考二"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/tb3039450/article/details/67636391",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考三"),a("OutboundLink")],1)])]),t._v(" "),a("p")])}),[],!1,null,null,null);a.default=e.exports}}]);