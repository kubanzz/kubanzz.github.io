(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{413:function(s,e,t){"use strict";t.r(e);var a=t(12),n=Object(a.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"jsp的工作机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsp的工作机制"}},[s._v("#")]),s._v(" JSP的工作机制")]),s._v(" "),e("ul",[e("li",[s._v("https://www.jianshu.com/p/93736c3b448b")])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images50693720-b75aad00-1072-11e9-98fc-9c82bdc58c53.jpg",alt:"1"}})]),s._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images50700283-1a553f80-1085-11e9-929e-3e8e2ca55094.png",alt:"1"}})]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("基本工作流程：")]),s._v("\n浏览器向服务器请求JSP页面，服务器收到该请求后，检查JSP文件内容是不是为第一次访问（是的话则创建servlet），检车JSP文件内容是否被修改（是的话则新建servlet），如果是，则这个JSP文件会在服务器端的"),e("strong",[s._v("JSP 引擎")]),s._v("作用下转化为一个servlet类的java源代码，然后会在java编译器的作用下转化为一个"),e("strong",[s._v("字节码文件")]),s._v("，并装载到"),e("strong",[s._v("JVM")]),s._v("解释运行。")])]),s._v(" "),e("p"),s._v(" "),e("h2",{attrs:{id:"jsp的三种脚本元素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsp的三种脚本元素"}},[s._v("#")]),s._v(" JSP的三种脚本元素：")]),s._v(" "),e("ul",[e("li",[s._v("声明（declaration）：用于在JSP中声明合法的变量和方法 "),e("code",[s._v("<%! 代码内容 %>")])]),s._v(" "),e("li",[s._v("表达式（expression）：计算该表达式，将其结果转换成字符串插入到输入中"),e("code",[s._v("<%=name %>")])]),s._v(" "),e("li",[s._v("脚本（Scriplets）：直接编写一行或多行代码  "),e("code",[s._v("<% 代码块 %>")])])]),s._v(" "),e("p"),s._v(" "),e("h2",{attrs:{id:"jsp的三种指令元素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsp的三种指令元素"}},[s._v("#")]),s._v(" JSP的三种指令元素")]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("page指令")]),s._v("：用于声明JSP页面的属性等")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('<%@ page \n 2     [ language="java" ] \n 3     [ extends="package.class" ] \n 4     [ import="{package.class | package.*}, ..." ] \n 5     [ session="true | false" ] \n 6     [ buffer="none | 8kb | sizekb" ] \n 7     [ autoFlush="true | false" ] \n 8     [ isThreadSafe="true | false" ] \n 9     [ info="text" ] \n10     [ errorPage="relative_url" ] \n11     [ isErrorPage="true | false" ] \n12     [ contentType="mimeType [ ;charset=characterSet ]" | "text/html ; charset=ISO-8859-1" ] \n13     [ pageEncoding="characterSet | ISO-8859-1" ] \n14     [ isELIgnored="true | false" ] \n15 %>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("ul",[e("li",[e("strong",[s._v("include指令")]),s._v("：通过include指令将包含的源代码添加到页面中")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('静态包含：把其它资源包含到当前页面中。\n       <%@ include file="/include/header.jsp" %>\n动态包含：\n       <jsp:include page="/include/header.jsp"></jsp:include>\n\n原则：能用静态就不要用动态\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("ul",[e("li",[e("strong",[s._v("taglib指令")]),s._v("：用于引入外部tag标签库后者自定义tag标签库`")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('taglib指令有两个属性，uri为类库的地址，prefix为标签的前缀\n<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p"),s._v(" "),e("h2",{attrs:{id:"jsp的四个作用域-page-request-session-application"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsp的四个作用域-page-request-session-application"}},[s._v("#")]),s._v(" JSP的四个作用域(page，request，session，application)")]),s._v(" "),e("ul",[e("li",[e("p",[e("strong",[s._v("page：")]),s._v(" 当前访问的页面内有效，关闭页面重新打开或刷新后变量或对象重置；")])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("request：")]),s._v(" 变量或对象存在于一次完整HTTP请求与响应期间，完成后被释放。当跳转到其他的JSP页面就失效了。")])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("session：")]),s._v(" HTTP会话从开始（浏览器打开）到结束这段时间，只要将数据存入session对象，数据的范围就是session")])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("application：")]),s._v(" 服务器从启动带停止这一段时间，application作用域上的信息传递是通过ServletContext实现的。")])])]),s._v(" "),e("p"),s._v(" "),e("h2",{attrs:{id:"jsp的六种常见行为动作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsp的六种常见行为动作"}},[s._v("#")]),s._v(" JSP的六种常见行为动作")]),s._v(" "),e("ul",[e("li",[e("p",[e("strong",[s._v("<jsp:include >")]),s._v(" ：动态包含")])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("<jsp:forward >")]),s._v(" ：请求转发")])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("<jsp:param >")]),s._v(" ：设置请求参数")])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("<jsp:useBean >")]),s._v(" ：创建一个对象")])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("<jsp:setProperty >")]),s._v("： 给指定的对象属性赋值")])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("<jsp:getProperty >")]),s._v(" ：取出指定对象的属性值")])])]),s._v(" "),e("p"),s._v(" "),e("h2",{attrs:{id:"jsp九大内置对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsp九大内置对象"}},[s._v("#")]),s._v(" JSP九大内置对象")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images50721528-f4b74d00-10fb-11e9-9030-31f5573a8855.png",alt:"999804-20171008221554356-961080744"}})]),s._v(" "),e("p",[e("strong",[s._v("out：")]),e("code",[s._v('out.write("⽂字内容");')])]),s._v(" "),e("ul",[e("li",[s._v("[ ] 类型：Javax.servlet.jsp.JspWriter")]),s._v(" "),e("li",[s._v("[ ] 作⽤：主要⽤来向客户端输出数据")]),s._v(" "),e("li",[s._v("[ ] 作⽤域：page。也就是说，每个⻚⾯都有⼀个⾃⼰的out对象。")]),s._v(" "),e("li",[s._v("[ ] 重要⽅法：print()/println()/write() 向客户端⻚⾯输出数据")])]),s._v(" "),e("p",[e("strong",[s._v("request：")])]),s._v(" "),e("ul",[e("li",[s._v("[ ] 类型：Javax.servlet.http.HttpServletRequest")]),s._v(" "),e("li",[s._v("[ ] 描述：来⾃客户端的请求经Servlet容器处理后，由request对象进⾏封装。注：客户端和服务器的⼀")]),s._v(" "),e("li",[s._v("[ ] 次通信就是⼀次请求（发送请求或得到相应）。")]),s._v(" "),e("li",[s._v("[ ] 作⽤域：request。说明，这次请求结束后，它的⽣命周期 就结束了。")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('request.getRequestDispatcher("list.jsp").forward(request,response) 转发(通过代码的⽅式进⾏转发)\nrequest.setCharacterEncoding("UTF-8")  对请求数据重新编码\n\ngetParameter(key) 获取提交表单的数据\ngetParameterValues(key) 获取提交表单的⼀组数据\n\nrequest.setAttribute(key,object) 设置请求对象的属性\nrequest.gettAttribute(key) 获取请求对象的属性\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[e("strong",[s._v("response：")])]),s._v(" "),e("ul",[e("li",[s._v("[ ] 类型：Javax.servlet.http. HttpServletResponse")]),s._v(" "),e("li",[s._v("[ ] 描述：它封闭了JSP 的响应，然后被发送到客户端以响应客户的请求。")]),s._v(" "),e("li",[s._v("[ ] 作⽤域：page")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('response.sendRedirect("⻚⾯")：⻚⾯跳转。注意，之前的forward是转发，这⾥是跳转，注意区分。\nresponse.setCharacterEncoding("gbk")：设置响应编码\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[e("strong",[s._v("session：")])]),s._v(" "),e("ul",[e("li",[e("p",[e("strong",[s._v("会话的创建过程：")]),s._v("\n如果是第⼀次接触“会话”这个概念，需要重复⼀下。说⽩了，客户端与服务器之间可能需要不"),e("strong",[s._v("断地进行\n数据交互")]),s._v("（请求与相应），这个过程就可以理解为⼀段"),e("strong",[s._v("会话")]),s._v("。Tomcat默认的会话时间为"),e("strong",[s._v("30分钟")]),s._v("，这段时间内如果没有交互，会话结束；下次客户端⼀旦发送请求，重新创建会话。当客户端第⼀次发送请求的时候，才会创建⼀个会话。"),e("strong",[s._v("session的⽣命周期⽐request⻓")])])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("session创建的详细过程：")]),s._v("\n当客户端第一次访问JSP文件的时候，"),e("strong",[s._v("Servlet容器")]),s._v("（Tomcat）会创建session，如果不是第一次访问，则会检索是否存在此session，存在的话则使用，不存在的话则重新创建，此时为"),e("strong",[s._v("新会话")]),s._v("。")])]),s._v(" "),e("li",[e("p",[s._v("[ ] 类型：Javax.servlet.http.HttpSession")])]),s._v(" "),e("li",[e("p",[s._v("[ ] 描述：表示⼀个会话，⽤来保存⽤户信息，以便跟踪每个⽤户的状态。（不要⽤来保存业务数据，request）")])]),s._v(" "),e("li",[e("p",[s._v("[ ] 定义：是指在⼀段时间内客户端和服务器之间的⼀连串的相关的交互过程。")])]),s._v(" "),e("li",[e("p",[s._v("[ ] 作⽤域：session。")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/*\n会话结束的条件之⼀：\n服务器关闭\n会话过期（⼀段会话时间默认为30分钟）\n⼿动终⽌会话\n【举例】为保持⽤户登录的状态，我们可以把⽤户的数据信息保存在session中。\n*/\n\nsession.getid()：取得session的id号.id由tomcat⾃动分配。\nsession.isnew()：判断session时候是新建的\nsession.setMaxInactiveInterval(1000*60*30)：设置当前会话失效时间(ms) 。Tomcat默认的会话时间为30分钟。\nsession.invalidate()：初始化当前会话对象(⼀般在推出的时候使⽤，可以删除当前会话的数据)\n\nsession.setAttribute(key,object)：往当前会话中设置⼀个属性\nsession.getAttribute(key)：获取当前会话中的⼀个属性\nsession.removeAttribute(key)：删除当前会话中的属性\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[e("strong",[s._v("pageContext：")])]),s._v(" "),e("ul",[e("li",[s._v("[ ] 类型：javax.servlet.jsp.PageContext")]),s._v(" "),e("li",[s._v("[ ] 描述：本JSP的⻚⾯上下⽂。")]),s._v(" "),e("li",[s._v("[ ] 作⽤域：page")]),s._v(" "),e("li",[s._v("[ ] 注：上下⽂的理解：上下⽂可以联系到当前⻚⾯所有的信息。")]),s._v(" "),e("li",[s._v("[ ] 我们先来回顾⼀下原始的request.jsp代码：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("//通过PageContext上下⽂对象获取当前⻚⾯的其他内置对象\npageContext.getRequest();\npageContext.getResponse();\npageContext.getSession();\npageContext.getOut();\nString path = request.getContextPath(\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[e("strong",[s._v("application：")])]),s._v(" "),e("p",[s._v("这个对象的⽣命周期是最⻓的。服务器启动的时候就会创建application对象。从服务器存在到服务器\n终⽌，都⼀直存在，且只保留⼀个对象，所有⽤户共享⼀个application。不是很常⽤。")]),s._v(" "),e("ul",[e("li",[s._v("[ ] 类型：javax.servlet.ServletContext")]),s._v(" "),e("li",[s._v("[ ] 描述：从servlet配置对象获得的servlet上下⽂")]),s._v(" "),e("li",[s._v("[ ] 作⽤域：application")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('//⼀个应⽤程序只有⼀个application对象\n//在服务器启动时创建，到服务器关闭时销毁\n//所有客户端共享⼀份\nString serverPath = application.getContextPath();//获取当前应⽤程序的路径\n\n//向application对象添加数据\napplication.setAttribute("", "");\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[e("strong",[s._v("config：")])]),s._v(" "),e("ul",[e("li",[s._v("[ ] 类型：javax.servlet.ServletConfig")]),s._v(" "),e("li",[s._v("[ ] 描述：本JSP的 ServletConfig")]),s._v(" "),e("li",[s._v("[ ] 作⽤域：page")]),s._v(" "),e("li",[s._v("[ ] 注：代表配置对象，基本⽤不到。")])]),s._v(" "),e("p",[e("strong",[s._v("page：")])]),s._v(" "),e("ul",[e("li",[s._v("[ ] 类型：java.1ang.Object")]),s._v(" "),e("li",[s._v("[ ] 描述：实现处理本⻚当前请求的类的实例（javax.servlet.jsp.HttpJspPage），转换后的Servlet类")]),s._v(" "),e("li",[s._v("[ ] 本身")]),s._v(" "),e("li",[s._v("[ ] 作⽤域：page")])]),s._v(" "),e("p",[e("strong",[s._v("exception：")])]),s._v(" "),e("ul",[e("li",[e("p",[s._v("[ ] JSP常⻅错误状态码：\n403：禁⽌访问。⽐如IP地址被拒绝，站点访问被拒绝等\n404：找不到。没有找到⽂件或⽬录\n500：服务器由于遇到错误⽽不能完成该请求，Web服务器太忙")])]),s._v(" "),e("li",[e("p",[s._v("[ ] 类型：java.lang.Exception")])]),s._v(" "),e("li",[e("p",[s._v("[ ] 描述：本JSP⻚⾯的异常对象")])]),s._v(" "),e("li",[e("p",[s._v("[ ] 作⽤域：page")])])]),s._v(" "),e("p"),s._v(" "),e("h2",{attrs:{id:"jsp的自定义标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsp的自定义标签"}},[s._v("#")]),s._v(" JSP的自定义标签")]),s._v(" "),e("p",[e("strong",[s._v("自定义标签库方式：")])]),s._v(" "),e("ul",[e("li",[e("p",[e("strong",[s._v("tag方式")]),s._v("，引用的时候通过tagdir属性指定.tag文件的位置，例如\n"),e("code",[s._v('<%@ taglib prefix="x" tagdir="/WEB-INF/tags" %>')])])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("tld方式")]),s._v("，通过uri属性指定.tld文件的位置，需要在web.xml中jsp-config配置taglib\n"),e("code",[s._v('<%@ taglib prefix="c" tagdir="http://java.sun.com/jsp/jstl/core" %>')])])])]),s._v(" "),e("p"),s._v(" "),e("p",[e("strong",[s._v("自定义标记的方式：")])]),s._v(" "),e("ul",[e("li",[e("p",[s._v("简单标记，不处理体内容：\n需实现"),e("code",[s._v("javax.servlet.jsp.tagext.Tag")]),s._v("接口，这个接口实现"),e("code",[s._v("javax.servlet.jsp.tagext.TagSupport")])])]),s._v(" "),e("li",[e("p",[s._v("处理体内容的标记：\n需要实现"),e("code",[s._v("javax.servlet.jsp.tagext.BodyTag")]),s._v("接口，这个接口实现"),e("code",[s._v("java.servlet.jsp.tagext.BodyTagSupport")])])])]),s._v(" "),e("p",[e("strong",[s._v("使用步骤：")])]),s._v(" "),e("ul",[e("li",[s._v("引入"),e("strong",[s._v("javax.servlet-api，jsp-api，jstl")]),s._v("三个包")]),s._v(" "),e("li",[s._v("新建标签库描述文件，放在"),e("strong",[s._v("webapp/WEB-INF/tld")]),s._v("目录下")]),s._v(" "),e("li",[s._v("标签库描述文件格式：http://book.51cto.com/art/201004/193459.htm")])]),s._v(" "),e("p"),s._v(" "),e("h2",{attrs:{id:"动态include与静态include的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#动态include与静态include的区别"}},[s._v("#")]),s._v(" 动态include与静态include的区别")]),s._v(" "),e("ul",[e("li",[e("p",[e("strong",[s._v("静态include：")]),s._v(" "),e("code",[s._v('<%@include file="include.html" %>')]),s._v("\n静态include主要是对静态页面的引入，不会检查所包含文件的变化，同时编译时只生成一个class文件（先包含include，后编译）")])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("动态include：")]),s._v(" "),e("code",[s._v('<jsp:include file="include.html" />')]),s._v("\n动态include主要是对动态页面的引入，它会检查所引入页面的变化，如果所包含的资源在请求间发生变化，则下次请求此资源时，将包含新的内容。编译后会生成多个class文件。（先编译include的文件，再包含）")])])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images50721154-97b89880-10f5-11e9-92b7-10a4346079f5.png",alt:"999804-20171008214205871-540005881"}})]),s._v(" "),e("p"),s._v(" "),e("h2",{attrs:{id:"jsp的常见问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsp的常见问题"}},[s._v("#")]),s._v(" JSP的常见问题")]),s._v(" "),e("ul",[e("li",[e("p",[e("strong",[s._v("JSP如何把页面的编码格式设为utf-8：")]),s._v(" "),e("code",[s._v("<%@ page pageEncoding=”utf-8” %>")])])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("JSP通常使用什么内置对象实现对用户会话的跟踪：")]),s._v(" "),e("code",[s._v("session")])])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("taglib用什么方法接收参数，用什么方法发送参数？")]),s._v("\n接受参数（EL表达式）："),e("code",[s._v("${param.name}")]),s._v("\n发送参数："),e("code",[s._v('<jsp:param name="" value=""/>')])])])]),s._v(" "),e("p"),s._v(" "),e("p",[e("strong",[s._v("参考文献：")])]),s._v(" "),e("ul",[e("li",[s._v("https://www.cnblogs.com/zhangyinhua/p/7637399.html#_label1")])]),s._v(" "),e("hr")])}),[],!1,null,null,null);e.default=n.exports}}]);