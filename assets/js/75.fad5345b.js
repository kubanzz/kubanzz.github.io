(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{401:function(s,t,a){"use strict";a.r(t);var n=a(12),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/imagesimage-20220831174219222.png",alt:"image-20220831174219222"}})]),s._v(" "),t("h2",{attrs:{id:"一、管道-pipeline"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、管道-pipeline"}},[s._v("#")]),s._v(" 一、管道（Pipeline）")]),s._v(" "),t("ul",[t("li",[s._v("参考："),t("a",{attrs:{href:"https://juejin.cn/post/7089081484958679077#heading-5",target:"_blank",rel:"noopener noreferrer"}},[s._v("链接*"),t("OutboundLink")],1)])]),s._v(" "),t("blockquote",[t("p",[s._v("管道技术（Pipeline）本质上就是一种批处理技术。由于客户端与服务端通过socket进行连接，当短时间内大量命令产生的时候，如果采用普通的传输方式进行请求，命令间需要同步调用、请求的往返需要时间，并且客户端和服务端需要多次进行IO的的用户态到内核台的切换，会造成大量的网络资源浪费，而管道技术就是将所有命令都整合起来一次性发给服务端，再一次性响应给客户端，从而大大提升redis的响应速度。管道虽然提升了响应速度，但是仍然需要注意管道传输的数据大小，redis的输入缓冲区默认的最大是1G，超过会被断开连接。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/imagesimage-20220809001446974.png",alt:"image-20220809001446974"}})]),s._v(" "),t("p",[t("strong",[s._v("pipeline和原生批量命令（mget、mset）的区别")])]),s._v(" "),t("ul",[t("li",[s._v("原生命令具有原子性（跟setnx原子性命令类似），pipeline不具备原子性（中间命令出错仍然会继续执行）。")]),s._v(" "),t("li",[s._v("原生命令是一个命令对应多个键值对，而pipeline是多条命令。")]),s._v(" "),t("li",[s._v("原生命令是服务端实现，而pipeline是服务端和客户端共同完成。（pipeline需要在客户端缓冲区中组装多条指令）")])]),s._v(" "),t("p",[t("strong",[s._v("pipeline和事务的区别")])]),s._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://juejin.cn/post/7125820336104275982",target:"_blank",rel:"noopener noreferrer"}},[s._v("*Redis的事物"),t("OutboundLink")],1)])]),s._v(" "),t("li",[t("p",[s._v("事物关注的是ACID，而pipeline关注的是RTT的减少")])]),s._v(" "),t("li",[t("p",[s._v("Redis的事物通过Multi、Exec命令控制，先Multi开启事物，此过程的命令会被存储在队列中，然后在通过exec提交事物")]),s._v(" "),t("ul",[t("li",[s._v("原子性：不保证，执行过程有命令出错，仍然会继续执行，但是如果是在执行前检测到命令有误，则会回滚事物")]),s._v(" "),t("li",[s._v("隔离性：保证，Redis的事物有CAS（check and set）机制，通过watch机制监控相关key数据是否被修改，修改则关闭事物")]),s._v(" "),t("li",[s._v("持久性：不保证，没来得及被持久化的数据，仍然会丢失")])])])]),s._v(" "),t("p",[t("strong",[s._v("pipeline的优缺点")])]),s._v(" "),t("ul",[t("li",[s._v("优点：批量操作，减少传输IO及系统切换开销")]),s._v(" "),t("li",[s._v("缺点：\n"),t("ul",[t("li",[s._v("不能保证原子性，部分指令可能执行失败，并且其他指令会继续执行。")]),s._v(" "),t("li",[s._v("只能作用在一个节点上，暂时不支持集群。")])])])]),s._v(" "),t("p",[t("strong",[s._v("适用场景")])]),s._v(" "),t("ul",[t("li",[s._v("pipeline适用于指令间没有依赖关系的情况，并且对可靠性要求不高的场景。因为其不能保证所有命令都正常执行。")]),s._v(" "),t("li",[s._v("例如用户群发短信，这时候就可以用pipeline，因为群发消息实时性要求不高，并且即使部分失败，后续有补偿机制即可。")])]),s._v(" "),t("p",[t("strong",[s._v("pipeline用法")])]),s._v(" "),t("ol",[t("li",[s._v("redistemplate")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Long")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" redisTemplate"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("executePipelined")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RedisCallback")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Long")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Nullable")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Long")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("doInRedis")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RedisConnection")]),s._v(" connection"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DataAccessException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    connection"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("openPipeline")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" key "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"123"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      connection"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("zCount")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBytes")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("MAX_VALUE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("Jedis")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Jedis")]),s._v(" jedis "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Jedis")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"127.0.0.1"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取 Pipeline 对象")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Pipeline")]),s._v(" pipe "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" jedis"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pipelined")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置多个 Redis 命令")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  pipe"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"key"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"val"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 执行命令并返回结果")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" res "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" pipe"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("syncAndReturnAll")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" obj "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 打印结果")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("h2",{attrs:{id:"二、持久化-aof-rdb"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、持久化-aof-rdb"}},[s._v("#")]),s._v(" 二、持久化（AOF/RDB）")]),s._v(" "),t("blockquote",[t("p",[s._v("由于Redis在内存中做数据操作，为了保证服务器重启时数据不丢失，Redis提供了两种持久化机制（Redis的持久化过程都是通过fork新的线程异步执行），分别为"),t("strong",[s._v("AOF")]),s._v("（appendonly.aof）和"),t("strong",[s._v("RDB")]),s._v("（dump.rdb），两者的区别如下：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("文件格式不同")]),s._v("：AOF存储的是键值操作的命令，以文件追加的方式添加到AOF文件中，所以文件会比较大。而RDB存储的是某时刻的内存快照，将当前数据以二进制文件存储并写入磁盘，相对文件比较小。\n"),t("ul",[t("li",[s._v("AOF文件恢复速度比较慢，但是可读性好，容易修复，而且增量的方式更加轻量。")]),s._v(" "),t("li",[s._v("RDB文件则恢复速度快，但是每次都需要持久化整块内存快照，所以在数据量较大而且CPU性能不佳时会导致服务停顿。")])])]),s._v(" "),t("li",[t("strong",[s._v("持久化时间不同")]),s._v("：AOF默认每秒将命令追加到AOF文件中，即使服务重启也只会丢失一秒内的操作，而RDB由于是对内存快照的复制，不能像AOF那样进行增量增加，所以通常是隔一段时间进行持久化存储，这就导致RDB模式下容易丢失某段时间内的数据。")]),s._v(" "),t("li",[t("strong",[s._v("恢复程度不同")]),s._v("：如果不小心调用了flushall命令，由于AOF是文件追加方式，可以通过删除flushall命令还原，而RDB是基于内存快照，会导致所有数据被清空。")])])]),s._v(" "),t("p",[s._v("AOF和RDB除了自动触发外，也可以通过手动触发：")]),s._v(" "),t("ul",[t("li",[s._v("save：同步持久化，阻塞主线程")]),s._v(" "),t("li",[s._v("bgsave：异步持久化，通过fork命令创建子线程，而fork也会消耗一定的内存")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/images2020-02-24-122534.png",alt:"image.png"}})]),s._v(" "),t("p",[t("strong",[s._v("AOF重写机制")])]),s._v(" "),t("p",[s._v("由于AOF以文件追加方式添加到AOF文档，为了解决文档过大的问题，Redis提供了文件重写功能，当达到一定的文件大小（默认为60M），则重写当前文件，并把当前数据的最少操作命令保存到新文件上，从而减少文件大小。")]),s._v(" "),t("p",[t("strong",[s._v("AOF和RDB混合持久化")])]),s._v(" "),t("p",[s._v("由于AOF和RDB各有弊端，AOF文件过大时会影响启动速度，RDB会有一段时间的数据丢失，为了同时能用到AOF和RDB的优点，Redis4.0后新增了混合持久化的方式，在混合持久化的模式下，AOF在重写时会把Redis的持久化数据，以RDB的格式进行存储，并且将接下来的持久化以AOF格式追加到文件末尾。开头为RDB文件，使得Redis能够快速启动，同时又结合了AOF的优点，避免了大量数据丢失的风险。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/images2020-02-24-122549.png",alt:"image.png"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/images2020-02-24-122601.png",alt:"image.png"}})]),s._v(" "),t("h2",{attrs:{id:"三、事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、事务"}},[s._v("#")]),s._v(" 三、事务")]),s._v(" "),t("blockquote",[t("p",[s._v("Redis的事务底层通过"),t("code",[s._v("MULTI（开启事务） 、 EXEC （执行）、 DISCARD（回滚） 和 WATCH（监听）")]),s._v("几个命令实现。事务衡量指标是ACID，Redis中的事务保证如下：")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("A原子性")]),s._v("：编译时保证原子性，如果编译时发现中间有命令语法错误，则回滚；运行时不保证，运行中有命令出错则跳过继续执行。Redis只保证"),t("strong",[s._v("所有的命令，要么全部执行，要么全部不执行")]),s._v("。而不是完全成功。（Redis官方认为的原子性）")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("C一致性")]),s._v("：如果按照官方对A的理解，那么一致性也是保证的。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("I隔离性")]),s._v("：Redis事务是严格遵守隔离性的，因为redis是单线程模式，可以保证命令执行过程中不会被其他客户端命令打断。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("D持久性")]),s._v("：Redis是基于内存进行数据操作的，虽然有持久化机制，但是无法保证所有数据不丢失。")])])])]),s._v(" "),t("p",[t("strong",[s._v("CAS操作实现乐观锁")])]),s._v(" "),t("blockquote",[t("p",[s._v("案例分析：")]),s._v(" "),t("p",[s._v("用户1先读key，后操作，再写入")]),s._v(" "),t("p",[s._v("用户2先读key，后操作，再写入")]),s._v(" "),t("p",[s._v("这会出现并发问题，导致数据被覆盖，Redis提供了watch命令实现CAS操作，通过watch监控某个键值对，然后开启事务进行修改，如果在提交事务前发现键值对被修改了，则回滚事务。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("WATCH mykey\nMULTI\nval = GET mykey\nval = val + 1\nSET mykey $val\nEXEC\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/images/db-redis-trans-2.png",alt:"img"}})]),s._v(" "),t("p",[t("strong",[s._v("Redis事务执行步骤")])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("开启")]),s._v("：以MULTI开始一个事务")]),s._v(" "),t("li",[t("strong",[s._v("入队")]),s._v("：将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面")]),s._v(" "),t("li",[t("strong",[s._v("执行")]),s._v("：由EXEC命令触发事务")])]),s._v(" "),t("p",[s._v("当一个客户端切换到事务状态之后， 服务器会根据这个客户端发来的不同命令执行不同的操作：")]),s._v(" "),t("ul",[t("li",[s._v("如果客户端发送的命令为 EXEC 、 DISCARD 、 WATCH 、 MULTI 四个命令的其中一个， 那么服务器立即执行这个命令。")]),s._v(" "),t("li",[s._v("与此相反， 如果客户端发送的命令是 EXEC 、 DISCARD 、 WATCH 、 MULTI 四个命令以外的其他命令， 那么服务器并不立即执行这个命令， 而是将这个命令放入一个事务队列里面， 然后向客户端返回 QUEUED 回复。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/images/db-redis-trans-1.png",alt:"img"}})]),s._v(" "),t("h2",{attrs:{id:"四、参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、参考"}},[s._v("#")]),s._v(" 四、参考")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.pdai.tech/md/db/nosql-redis/db-redis-x-trans.html#redis%E4%BA%8B%E5%8A%A1%E5%85%B6%E5%AE%83%E5%AE%9E%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"}},[s._v("pdai大佬"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=e.exports}}]);