(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{352:function(e,a,o){"use strict";o.r(a);var t=o(12),v=Object(t.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"一、线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、线程池"}},[e._v("#")]),e._v(" 一、线程池")]),e._v(" "),a("h4",{attrs:{id:"原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[e._v("#")]),e._v(" 原理：")]),e._v(" "),a("blockquote",[a("p",[e._v("类似于操作系统中的缓冲区，流程如下：先启动若干数量的线程，并让线程处于休眠的状态，当客户端有新请求时就回唤醒其中一个睡眠线程进行请求处理，处理完又处于睡眠状态。")])]),e._v(" "),a("h4",{attrs:{id:"java的六大线程池-executors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java的六大线程池-executors"}},[e._v("#")]),e._v(" JAVA的六大线程池（Executors）")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("FixedThreadPool")]),e._v("（定长连接池）：")]),e._v(" "),a("ul",[a("li",[e._v("固定线程池中线程的个数。使用静态方法 newFixedThreadPool() 创建线程池的时候指定线程池个数。")]),e._v(" "),a("li",[e._v("适用：执行长期的任务。")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("CachedThreadPool")]),e._v("（弹性缓存线程池）")]),e._v(" "),a("ul",[a("li",[e._v("使用 newCachedThreadPool() 方法创建该线程池对象，创建之初池中没有线程，当 "),a("code",[e._v("execute")]),e._v(" 方法或 "),a("code",[e._v("submit")]),e._v(" 方法向线程池提交任务时，会自动创建线程；如果有空余线程则不被创建，线程60秒后被回收。")]),e._v(" "),a("li",[e._v("适用：执行很多短期异步的小程序或者负载较轻的服务器。")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("SingleThreadPool")]),e._v("（单线程线程池）")]),e._v(" "),a("ul",[a("li",[e._v("池中只有一个线程，如果有多个线程，则需要进行排队，可以保证任务的顺序执行。")]),e._v(" "),a("li",[e._v("适用：顺序执行的任务场景。")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("ScheduledThreadpool")]),e._v("（定时器线程池，定长线程池）")]),e._v(" "),a("ul",[a("li",[e._v("支持定时及周期性任务执行。")]),e._v(" "),a("li",[e._v("适应：周期性执行任务的场景。")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("WorkStealingPool")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("ForkJoinPool")])])])]),e._v(" "),a("p"),e._v(" "),a("h2",{attrs:{id:"二、连接池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、连接池"}},[e._v("#")]),e._v(" 二、连接池")]),e._v(" "),a("h4",{attrs:{id:"原理-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原理-2"}},[e._v("#")]),e._v(" 原理")]),e._v(" "),a("ul",[a("li",[e._v("数据库连接是一种关键的有限的昂贵资源，这一点在多用户的网页应用程序中体现得尤为突出。 一个数据库连接对象均对应一个物理数据库连接，每次操作都打开一个物理连接，使用完都关闭连接，这样造成系统的 性能低下。 数据库连接池的解决方案是在应用程序启动时建立足够的数据库连接，并讲这些连接组成一个连接池(简单说：在一个“池”里放了好多半成品的"),a("code",[e._v("数据库联接对象")]),e._v(")，由应用程序动态地对池中的连接进行"),a("code",[e._v("申请、使用和释放")]),e._v("。对于多于连接池中连接数的并发请求，应该在请求队列中排队等待。并且应用程序可以根据池中连接的使用率，动态增加或减少池中的连接数。")]),e._v(" "),a("li",[e._v("连接池技术尽可能多地重用了消耗内存地资源，大大节省了内存，提高了服务器地服务效率，能够支持更多的客户服务。通过使用连接池，将大大提高程序运行效率，同时，我们可以"),a("code",[e._v("通过其自身的管理机制来监视数据库连接的数量、使用情况")]),e._v("等。")])]),e._v(" "),a("h4",{attrs:{id:"主流的数据库连接池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主流的数据库连接池"}},[e._v("#")]),e._v(" 主流的数据库连接池")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("C3p0")]),e._v("：开源的JDBC连接池，实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。目前使用它的开源项目有Hibernate、Spring等。单线程，性能较差，适用于小型系统，代码600KB左右。")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("DBCP (Database Connection Pool)")]),e._v("：Apache开发的一个Java数据库连接池项目， Jakarta commons-pool对象池机制，Tomcat使用的连接池组件就是DBCP。单独使用dbcp需要3个包：common-dbcp.jar,common-pool.jar,common-collections.jar，预先将数据库连接放在内存中，应用程序需要建立数据库连接时直接到连接池中申请一个就行，用完再放回。单线程，并发量低，性能不好，适用于小型系统。")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("Tomcat Jdbc Pool")]),e._v("：Tomcat在7.0以前都是使用"),a("code",[e._v("common-dbcp")]),e._v("做为连接池组件，但是dbcp是单线程，为保证线程安全会锁整个连接池，性能较差，dbcp有超过60个类，也相对复杂。Tomcat从7.0开始引入了新增连接池模块叫做"),a("code",[e._v("Tomcat jdbc pool")]),e._v("，基于Tomcat JULI，使用Tomcat日志框架，完全兼容dbcp，通过异步方式获取连接，支持高并发应用环境，超级简单核心文件只有8个，支持JMX，支持"),a("code",[e._v("XA Connection")]),e._v("。")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("BoneCP")]),e._v("：官方说法BoneCP是一个高效、免费、开源的Java数据库连接池实现库。设计初衷就是为了提高数据库连接池性能，根据某些测试数据显示，BoneCP的速度是最快的，要比当时第二快速的连接池快25倍左右，完美集成到一些持久化产品如"),a("code",[e._v("Hibernate")]),e._v("和"),a("code",[e._v("DataNucleus")]),e._v("中。BoneCP特色：高度可扩展，快速；连接状态切换的回调机制；允许直接访问连接；自动化重置能力；JMX支持；懒加载能力；支持XML和属性文件配置方式；较好的Java代码组织，100%单元测试分支代码覆盖率；代码40KB左右。")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("Druid")]),e._v("：Druid是Java语言中最好的数据库连接池，"),a("code",[e._v("Druid")]),e._v("能够提供强大的监控和扩展功能，是一个可用于大数据实时查询和分析的"),a("code",[e._v("高容错、高性能")]),e._v("的开源"),a("code",[e._v("分布式系统")]),e._v("，尤其是当发生代码部署、机器故障以及其他产品系统遇到宕机等情况时，Druid仍能够保持100%正常运行。主要特色：为分析监控设计；快速的交互式查询；高可用；可扩展；Druid是一个开源项目，源码托管在github上。")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("HikariCP")]),e._v("：HikariCP通过优化(concurrentBag，fastStatementList )集合来提高并发的读写效率，使用threadlocal缓存连接及大量使用CAS的机制，最大限度的避免lock，但可能带来cpu使用率的上升。从字节码的维度优化代码，让方法尽量在35个字节码一下，来提升jvm的处理效率。")])])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/images60329915-e7e92700-99c3-11e9-94ed-1806b6de24a3.jpeg",alt:"java-datasource-pool-compare-1"}})]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/images60330303-bd4b9e00-99c4-11e9-8fa2-49485bdb87cb.png",alt:"image"}})]),e._v(" "),a("p"),e._v(" "),a("h4",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://blog.didispace.com/java-datasource-pool-compare/",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考一"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/qq_26963495/article/details/79056391",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考二"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/WoAiBianCheng123abc/article/details/82913013",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考三"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=v.exports}}]);