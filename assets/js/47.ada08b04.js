(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{374:function(e,s,n){"use strict";n.r(s);var a=n(12),t=Object(a.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"一、什么是ioc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、什么是ioc"}},[e._v("#")]),e._v(" 一、什么是IOC")]),e._v(" "),s("ul",[s("li",[e._v("IOC（"),s("code",[e._v("控制反转")]),e._v("）又叫做DI（"),s("code",[e._v("依赖注入")]),e._v("），它描述了对象的定义和依赖的一个过程，也就是说，依赖的对象通过构造参数、工厂方法参数或属性注入，当对象实例后依赖的对象才被创建，当创建bean后容器注入这些依赖对象。与原来在类中使用其他类时相比（new Object()），这个过程是"),s("code",[e._v("反向")]),e._v("的，即对象与对象间的依赖不再是主动的去new 一个对象，而是交由Bean容器在对象实例化的时候进行注入。")])]),e._v(" "),s("p"),e._v(" "),s("h2",{attrs:{id:"二、为什么要用ioc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、为什么要用ioc"}},[e._v("#")]),e._v(" 二、为什么要用IOC")]),e._v(" "),s("blockquote",[s("p",[e._v("IOC是Spring的重要部分，那么为什么要使用IOC呢？下面是使用IOC与不使用的比较：")])]),e._v(" "),s("p",[s("strong",[e._v("a. 原始的对象间的关系")]),e._v("：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/images60417713-a9e24200-9c13-11e9-8674-e37098f470b5.png",alt:"image"}})]),e._v(" "),s("p"),e._v(" "),s("p",[s("strong",[e._v("b.基于IOC容器的对象间的关系")]),e._v("：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/images60417734-ba92b800-9c13-11e9-82ca-f489a0b7fe79.png",alt:"image"}})]),e._v(" "),s("p"),e._v(" "),s("blockquote",[s("p",[e._v("从上面的图中对比可以看出，原始的对象间的关系存在着"),s("code",[e._v("耦合过高")]),e._v("的问题，在大型软件系统中其耦合程度更是极其复杂，IOC容器将复杂的系统分解成相互合作的对象，"),s("code",[e._v("降低了解决问题的复杂度")]),e._v("，并且由于Spring默认是单例模式，使得对象可以被灵活地"),s("code",[e._v("扩展和重用")]),e._v("，极大"),s("code",[e._v("降低了系统的开销")]),e._v("。通过IOC容器，实现了"),s("code",[e._v("具有依赖关系的对象间的解耦")]),e._v("。")])]),e._v(" "),s("p"),e._v(" "),s("h2",{attrs:{id:"三、ioc的实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、ioc的实现原理"}},[e._v("#")]),e._v(" 三、IOC的实现原理：")]),e._v(" "),s("blockquote",[s("p",[e._v("IOC中最基本的技术就是"),s("code",[e._v("反射")]),e._v("，JAVA反射机制就是在"),s("code",[e._v("运行状态")]),e._v("中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为JAVA语言的"),s("code",[e._v("反射机制")]),e._v("；这里简单讲述一下")])]),e._v(" "),s("h4",{attrs:{id:"为什么要使用反射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要使用反射"}},[e._v("#")]),e._v(" 为什么要使用反射：")]),e._v(" "),s("blockquote",[s("p",[e._v("程序运行前需要先编译，编译过程中将代码中需要的类加载到JVM中，运行的时候进行内存分配（类的实例化），相当于加载的类已经是固定的，如果使用静态编译的话，增加某个类的创建需要重新编译整个软件，而使用反射机制（动态编译）则不需要，可以在运行的过程中动态的获取。")])]),e._v(" "),s("p",[e._v("a. 无反射技术的工厂模式：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('//构造工厂类\n//也就是说以后如果我们在添加其他的实例的时候只需要修改工厂类就行了\nclass Factory{\n     public static fruit getInstance(String fruitName){\n         fruit f=null;\n         if("Apple".equals(fruitName)){\n             f=new Apple();\n         }\n         if("Orange".equals(fruitName)){\n             f=new Orange();\n         }\n         return f;\n     }\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("p",[e._v("b. 基于反射技术的工厂模式：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class Factory{\n    public static fruit getInstance(String ClassName){\n        fruit f=null;\n        try{\n            f=(fruit)Class.forName(ClassName).newInstance();\n        }catch (Exception e) {\n            e.printStackTrace();\n        }\n        return f;\n    }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("blockquote",[s("p",[e._v("由上面的代码示例可以看出，反射技术极大提升了代码的灵活性，由于无法知道需要创建的Bean类型，反射技术可以在运行时动态的调用构造方法进行类的动态创建，IOC实现的工厂模式即是使用反射技术，能否在运行时动态创建也是衡量一门语言是否是动态语言的标准。之一（可以查下动态语言和静态语言的区别）。")])]),e._v(" "),s("p"),e._v(" "),s("h4",{attrs:{id:"反射机制的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反射机制的作用"}},[e._v("#")]),e._v(" 反射机制的作用：")]),e._v(" "),s("ul",[s("li",[e._v("在运行的时候能够判断任意对象所属的类")]),e._v(" "),s("li",[e._v("在运行时获取类的对象")]),e._v(" "),s("li",[e._v("在运行时访问java的属性、方法和构造方法等；")])]),e._v(" "),s("p"),e._v(" "),s("h4",{attrs:{id:"反射技术的优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反射技术的优缺点"}},[e._v("#")]),e._v(" 反射技术的优缺点：")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("优点")]),e._v("：能够动态的创建对象和编译，具有极强的灵活性。")]),e._v(" "),s("li",[s("strong",[e._v("缺点")]),e._v("：性能相对较差，使用反射基本是一种解释性操作。")])]),e._v(" "),s("p"),e._v(" "),s("h2",{attrs:{id:"四、spring-ioc的重要内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、spring-ioc的重要内容"}},[e._v("#")]),e._v(" 四、Spring IOC的重要内容")]),e._v(" "),s("h3",{attrs:{id:"_4-1-依赖注入的实现-di"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-依赖注入的实现-di"}},[e._v("#")]),e._v(" 4.1 依赖注入的实现（DI）")]),e._v(" "),s("h4",{attrs:{id:"_4-1-1-注入方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-注入方式"}},[e._v("#")]),e._v(" 4.1.1 注入方式")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("基于"),s("code",[e._v("构造函数")]),e._v("的注入")])])]),e._v(" "),s("p",[e._v("TextEditor.java")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('public class TextEditor {\n   private SpellChecker spellChecker;\n   public TextEditor(SpellChecker spellChecker) {\n      System.out.println("Inside TextEditor constructor." );\n      this.spellChecker = spellChecker;\n   }\n   public void spellCheck() {\n      spellChecker.checkSpelling();\n   }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[e._v("SpellChecker.java")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('public class SpellChecker {\n   public SpellChecker(){\n      System.out.println("Inside SpellChecker constructor." );\n   }\n   public void checkSpelling() {\n      System.out.println("Inside checkSpelling." );\n   } \n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("MainApp.java")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('public class MainApp {\n   public static void main(String[] args) {\n      ApplicationContext context = \n             new ClassPathXmlApplicationContext("Beans.xml");\n      TextEditor te = (TextEditor) context.getBean("textEditor");\n      te.spellCheck();\n   }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("xml配置文件")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<?xml version="1.0" encoding="UTF-8"?>\n\n<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">\n\n   \x3c!-- Definition for textEditor bean --\x3e\n   <bean id="textEditor" class="com.tutorialspoint.TextEditor">\n      <constructor-arg ref="spellChecker"/>\n   </bean>\n\n   \x3c!-- Definition for spellChecker bean --\x3e\n   <bean id="spellChecker" class="com.tutorialspoint.SpellChecker">\n   </bean>\n\n</beans>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br")])]),s("p"),e._v(" "),s("ul",[s("li",[s("strong",[e._v("基于"),s("code",[e._v("setter方法")]),e._v("的注入")]),e._v("（由于注入是基于java"),s("code",[e._v("反射机制")]),e._v("实现的，即使没有 setter 声明的方法，也可以进行注入）")])]),e._v(" "),s("p",[e._v("TextEditor.java")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('public class TextEditor{\n   private SpellChecker spellChecker;\n   // a setter method to inject the dependency.\n   public void setSpellChecker(SpellChecker spellChecker) {\n      System.out.println("Inside setSpellChecker." );\n      this.spellChecker = spellChecker;\n   }\n   // a getter method to return spellChecker\n   public SpellChecker getSpellChecker() {\n      return spellChecker;\n   }\n   public void spellCheck() {\n      spellChecker.checkSpelling();\n   }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br")])]),s("p",[e._v("SpellChecker.java")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('public class SpellChecker {\n   public SpellChecker(){\n      System.out.println("Inside SpellChecker constructor." );\n   }\n   public void checkSpelling() {\n      System.out.println("Inside checkSpelling." );\n   }  \n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("xml配置文件")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<?xml version="1.0" encoding="UTF-8"?>\n\n<beans xmlns="http://www.springframework.org/schema/beans"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">\n\n   \x3c!-- Definition for textEditor bean --\x3e\n   <bean id="textEditor" class="com.tutorialspoint.TextEditor">\n      <property name="spellChecker" ref="spellChecker"/>\n   </bean>\n\n   \x3c!-- Definition for spellChecker bean --\x3e\n   <bean id="spellChecker" class="com.tutorialspoint.SpellChecker">\n   </bean>\n\n</beans>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br")])]),s("h4",{attrs:{id:"_4-1-2-注入配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-注入配置"}},[e._v("#")]),e._v(" 4.1.2 注入配置")]),e._v(" "),s("ul",[s("li",[e._v("基于"),s("code",[e._v("XML")]),e._v("的注入配置（如上面的配置）")]),e._v(" "),s("li",[e._v("基于"),s("code",[e._v("注解")]),e._v("的注入配置（通过"),s("code",[e._v("@Autowired")]),e._v("进行注入）")])]),e._v(" "),s("p"),e._v(" "),s("h3",{attrs:{id:"_4-2-spring-ioc的初始化-bean的初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-spring-ioc的初始化-bean的初始化"}},[e._v("#")]),e._v(" 4.2 Spring IOC的初始化（Bean的初始化）")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("参考："),s("a",{attrs:{href:"https://www.jianshu.com/p/70886997c46b",target:"_blank",rel:"noopener noreferrer"}},[e._v("链接"),s("OutboundLink")],1)])]),e._v(" "),s("li",[s("p",[e._v("主要分为三个步骤（容器的初始化是通过"),s("code",[e._v("refresh()")]),e._v("实现）")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("定位")]),e._v("：通过"),s("code",[e._v("Resource")]),e._v("定位"),s("code",[e._v("BeanDefinition")]),e._v("，BeanDefinition定义了Bean的元信息、依赖关系等，即寻找Bean的过程。")]),e._v(" "),s("li",[s("strong",[e._v("载入")]),e._v("："),s("code",[e._v("BeanDefinition")]),e._v("的信息已经定位到了，第二步就是把定义的"),s("code",[e._v("BeanDefinition")]),e._v("在"),s("code",[e._v("IOC容器")]),e._v("中转化成一个Spring内部标示的数据结构的过程。")]),e._v(" "),s("li",[s("strong",[e._v("注册")]),e._v("：将抽象好的BeanDefinition统一"),s("code",[e._v("注册")]),e._v("到IoC容器中，IoC容器是通过"),s("code",[e._v("ConcurrentHashMap")]),e._v("来维护BeanDefinition信息的，key为beanName，value为BeanDefinition。")])])])]),e._v(" "),s("p"),e._v(" "),s("h2",{attrs:{id:"五、ioc的优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、ioc的优缺点"}},[e._v("#")]),e._v(" 五、IOC的优缺点")]),e._v(" "),s("p",[s("strong",[e._v("优点")]),e._v("：")]),e._v(" "),s("ul",[s("li",[e._v("实现了对象之间的"),s("code",[e._v("解耦")]),e._v("，基于单例模式可以有效减少系统资源的消耗。")])]),e._v(" "),s("p",[s("strong",[e._v("缺点")]),e._v("：")]),e._v(" "),s("ul",[s("li",[e._v("基于"),s("code",[e._v("反射")]),e._v("实现，性能会稍微差一些，单例模式引入了线程安全问题。")]),e._v(" "),s("li",[e._v("生成对象的步骤变得复杂了，需要投入学习成本和精力。")])]),e._v(" "),s("p"),e._v(" "),s("h2",{attrs:{id:"六、ioc的源码解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、ioc的源码解析"}},[e._v("#")]),e._v(" 六、IOC的源码解析")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/images60594164-e611d000-9dd6-11e9-8255-bf4130cf4580.png",alt:"ClassPathXmlApplicationContext"}})]),e._v(" "),s("p",[s("strong",[e._v("BeanFactory和ApplicationContext的区别")])]),e._v(" "),s("ul",[s("li",[e._v("ApplicationContext接口"),s("code",[e._v("继承")]),e._v("自BeanFactory接口，同时继承了MessageSource和ResourceLoader等其他接口，相比BeanFactory，ApplicationContext提供了"),s("code",[e._v("更多的扩展功能")]),e._v("，如能够实现国际化访问、事务传播及AOP等服务。")]),e._v(" "),s("li",[e._v("BeanFactory是"),s("code",[e._v("懒加载")]),e._v("（延迟加载），BeanFactory加载后，需要第一次调用"),s("code",[e._v("getBean()")]),e._v("方法才会实例化，而ApplicaitonContext实现的是"),s("code",[e._v("饿汉加载")]),e._v("，在容器初始化的时候，会实例化所有的bean。")]),e._v(" "),s("li",[e._v("ApplicationContext可以"),s("code",[e._v("及时检查")]),e._v("Bean是否完成注入，BeanFactory需要调用getBean()的时候才会抛出异常。")])]),e._v(" "),s("p"),e._v(" "),s("h4",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/wang-meng/p/5597490.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考一"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://blog.csdn.net/u010325193/article/details/80865672",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考二"),s("OutboundLink")],1)]),e._v(" "),s("li",[e._v("*"),s("a",{attrs:{href:"https://blog.csdn.net/fuzhongmin05/article/details/61614873",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考三"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://blog.csdn.net/java_gchsh/article/details/78111200",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考四"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://blog.csdn.net/qq_19782019/article/details/85038081",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考五"),s("OutboundLink")],1),e._v("  （setter注入问题）")])])])}),[],!1,null,null,null);s.default=t.exports}}]);