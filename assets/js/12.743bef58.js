(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{340:function(t,v,a){"use strict";a.r(v);var s=a(12),_=Object(s.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"一、反射的原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、反射的原理"}},[t._v("#")]),t._v(" 一、反射的原理")]),t._v(" "),v("ul",[v("li",[t._v("Java反射机制可以让我们"),v("b",[t._v("在编译期（Compile Time）之外的运行期（Runtime）获得任何一个类的字节码。包括接口、变量、方法等信息。")]),t._v("还可以让我们在运行期实例化对象，通过调用get/set方法获取变量的值。")])]),t._v(" "),v("h2",{attrs:{id:"二、反射的功能"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、反射的功能"}},[t._v("#")]),t._v(" 二、反射的功能")]),t._v(" "),v("ul",[v("li",[t._v("可以判断运行时对象所属的"),v("strong",[t._v("类")])]),t._v(" "),v("li",[t._v("可以判断运行时对象所具有的"),v("strong",[t._v("成员变量和方法")])]),t._v(" "),v("li",[t._v("通过反射甚至可以"),v("strong",[t._v("调用private的方法")])]),t._v(" "),v("li",[v("strong",[t._v("生成动态代理")])]),t._v(" "),v("li",[t._v("Java反射的功能，一句话总结就是："),v("strong",[t._v("反射用于在运行时检测和修改某个对象的结构及其行为。")])])]),t._v(" "),v("h2",{attrs:{id:"三、反射相关属性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三、反射相关属性"}},[t._v("#")]),t._v(" 三、反射相关属性")]),t._v(" "),v("ul",[v("li",[t._v("Class：它表示正在运行的Java应用程序中的类和接口")]),t._v(" "),v("li",[t._v("Field：提供有关类或接口的属性信息，以及对它的动态访问权限")]),t._v(" "),v("li",[t._v("Constructor：提供关于类的单个构造方法的信息以及对它的访问权限")]),t._v(" "),v("li",[t._v("Method：提供关于类或接口中某个方法信息")]),t._v(" "),v("li",[t._v("注："),v("strong",[t._v("Class类是Java反射中最重要的一个功能类，所有获取对象的信息(包括：方法/属性/构造方法/访问权限)都需要它来实现")])])]),t._v(" "),v("p")])}),[],!1,null,null,null);v.default=_.exports}}]);