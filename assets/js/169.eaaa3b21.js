(window.webpackJsonp=window.webpackJsonp||[]).push([[169],{494:function(v,_,t){"use strict";t.r(_);var d=t(12),a=Object(d.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"贪心算法的本质"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法的本质"}},[v._v("#")]),v._v(" 贪心算法的本质")]),v._v(" "),_("ul",[_("li",[v._v("做出在当前看来最好的选择")]),v._v(" "),_("li",[_("strong",[v._v("自顶向下")]),v._v("地解决问题")])]),v._v(" "),_("p"),v._v(" "),_("h2",{attrs:{id:"贪心算法基本要素"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法基本要素"}},[v._v("#")]),v._v(" 贪心算法基本要素")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("最优子结构")])]),v._v(" "),_("li",[_("strong",[v._v("贪心选择")])])]),v._v(" "),_("p"),v._v(" "),_("h2",{attrs:{id:"贪心算法的例子"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法的例子"}},[v._v("#")]),v._v(" 贪心算法的例子")]),v._v(" "),_("p",[_("strong",[v._v("活动安排问题：")])]),v._v(" "),_("blockquote",[_("p",[v._v("利用贪心算法，解决下列活动安排问题")]),v._v(" "),_("ol",[_("li",[v._v("给出代表所选择活动的集合A的值（布尔值）")]),v._v(" "),_("li",[v._v("说明使用该算法最多能安排几个活动")]),v._v(" "),_("li",[v._v("活动的序号分别是什么")])])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("活动序号")]),v._v(" "),_("th",[v._v("1")]),v._v(" "),_("th",[v._v("2")]),v._v(" "),_("th",[v._v("3")]),v._v(" "),_("th",[v._v("4")]),v._v(" "),_("th",[v._v("5")]),v._v(" "),_("th",[v._v("6")]),v._v(" "),_("th",[v._v("7")]),v._v(" "),_("th",[v._v("8")]),v._v(" "),_("th",[v._v("9")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("开始时间")]),v._v(" "),_("td",[v._v("0")]),v._v(" "),_("td",[v._v("1")]),v._v(" "),_("td",[v._v("5")]),v._v(" "),_("td",[v._v("6")]),v._v(" "),_("td",[v._v("7")]),v._v(" "),_("td",[v._v("8")]),v._v(" "),_("td",[v._v("10")]),v._v(" "),_("td",[v._v("14")]),v._v(" "),_("td",[v._v("15")])]),v._v(" "),_("tr",[_("td",[v._v("结束时间")]),v._v(" "),_("td",[v._v("5")]),v._v(" "),_("td",[v._v("3")]),v._v(" "),_("td",[v._v("12")]),v._v(" "),_("td",[v._v("8")]),v._v(" "),_("td",[v._v("13")]),v._v(" "),_("td",[v._v("15")]),v._v(" "),_("td",[v._v("14")]),v._v(" "),_("td",[v._v("20")]),v._v(" "),_("td",[v._v("18")])])])]),v._v(" "),_("blockquote",[_("p",[v._v("解题思路：")]),v._v(" "),_("ol",[_("li",[v._v("按照活动结束的时间进行非减排序")]),v._v(" "),_("li",[v._v("根据所排顺序及活动时间是否冲突创建布尔（boolean）表并填入boolean值")]),v._v(" "),_("li",[v._v("根据布尔表得出安排的活动")])])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://user-images.githubusercontent.com/38284818/51071462-24320080-168c-11e9-83f2-56efd0246b7f.jpg",alt:"36548929ab0102d34ec9325d1625012"}})]),v._v(" "),_("p"),v._v(" "),_("p",[_("strong",[v._v("普通背包问题：")])]),v._v(" "),_("blockquote",[_("p",[v._v("利用贪心算法，解决下列背包问题：")]),v._v(" "),_("p",[v._v("背包容量为5，共有4个物品，其重量w={2, 4, 6, 1}，价值v={5, 6, 3, 3} 。\n给出解决问题的步骤\n给出最优值（背包中物品的总价值）和最优解（放入背包中每个物品的比例）")])]),v._v(" "),_("blockquote",[_("p",[_("strong",[v._v("1.")]),v._v(" 解题步骤：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("按v/w={2.5, 1.5, 0.5, 3}对物品进行排序结果为(编号): {4, 1, 2, 3}")])]),v._v(" "),_("li",[_("p",[v._v("依次将物品放入背包中\nx[4]=1, 剩余容量c=5-1=4\nx[1]=1, 剩余容量c=4-2=2\nx[2]=0.5, 剩余容量c=2-4*0.5=0"),_("br"),v._v("\nX[3]=0, c =0 （这一步可省略）")])])]),v._v(" "),_("p",[_("strong",[v._v("2.")]),v._v(" 放入背包中的物品总价值为：5+0.5*6+0+3=11\n"),_("strong",[v._v("3.")]),v._v(" 放入背包中的物品为 x = [1, 0.5, 0, 1]，即编号为1和4的物品全部放入背包中，编号为2的物品的1/2放入背包中，编号为3的物品不放入背包中")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images51071570-1d0bf200-168e-11e9-9c43-c340b7d0554f.jpg",alt:"36548929ab0102d34ec9325d1625012"}})]),v._v(" "),_("p"),v._v(" "),_("p",[_("strong",[v._v("最优装载问题：")])]),v._v(" "),_("blockquote",[_("p",[v._v("利用贪心算法，解决下列最优装载问题")]),v._v(" "),_("p",[v._v("共有3个集装箱，其重量为w={2, 4, 1}，集装箱的载重量为5\n给出解决问题的步骤以及结果（轮船上最大集装箱数量以及装入轮船上集装箱的编号）")])]),v._v(" "),_("blockquote",[_("p",[_("strong",[v._v("1.")]),v._v(" 解题步骤：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("按重量对集装箱从小到大进行排序结果为(编号): {3, 1, 2}")])]),v._v(" "),_("li",[_("p",[v._v("依次将集装箱装上轮船\nx[3]=1, 剩余容量c=5-1=4\nx[1]=1, 剩余容量c=4-2=2\nw[2]>c, 循环结束")])])]),v._v(" "),_("p",[_("strong",[v._v("2.")]),v._v(" 装上轮船集装箱数量为：2\n"),_("strong",[v._v("3.")]),v._v(" 装上轮船的集装箱为 x = [1,0,1]，即编号为1和3的集装箱装上轮船")])]),v._v(" "),_("p",[_("strong",[v._v("构造哈夫曼树：")])]),v._v(" "),_("blockquote",[_("p",[v._v("假设某文件共含有6个字符，其出现的频率如下：")])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("字符")]),v._v(" "),_("th",[v._v("A")]),v._v(" "),_("th",[v._v("B")]),v._v(" "),_("th",[v._v("C")]),v._v(" "),_("th",[v._v("D")]),v._v(" "),_("th",[v._v("E")]),v._v(" "),_("th",[v._v("F")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("频率")]),v._v(" "),_("td",[v._v("8")]),v._v(" "),_("td",[v._v("5")]),v._v(" "),_("td",[v._v("6")]),v._v(" "),_("td",[v._v("12")]),v._v(" "),_("td",[v._v("3")]),v._v(" "),_("td",[v._v("1")])])])]),v._v(" "),_("blockquote",[_("p",[v._v("根据该频率构造哈夫曼树时，优先队列的出队顺序是什么？\n给出最终构造出的哈夫曼树")]),v._v(" "),_("ul",[_("li",[v._v("采用贪心算法构造哈夫曼树时，可采用优先队列实现最小频度子树的选择")]),v._v(" "),_("li",[v._v("规定构造哈夫曼树时，左子树的频度<右子树的频度")])])]),v._v(" "),_("p"),v._v(" "),_("p",[_("img",{attrs:{src:"https://user-images.githubusercontent.com/38284818/51071827-47f84500-1692-11e9-9d2f-8f3284dcb46a.jpg",alt:"a25bfe3dbeae45f79da4572b2adad8f"}})]),v._v(" "),_("p"),v._v(" "),_("p",[_("strong",[v._v("Dijkstra算法（迪杰斯特拉算法）：")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images51072845-c9f06a00-16a2-11e9-997e-2847b4a0c080.gif",alt:"20160728152643837"}})]),v._v(" "),_("p"),v._v(" "),_("blockquote",[_("p",[v._v("题目：用Dijkstra算法计算下图从源顶点1到其它顶点间最短路径，并给出中间过程（ u，S及dist）")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images51072817-551d3000-16a2-11e9-83a0-c855626c1922.png",alt:"5"}})]),v._v(" "),_("p"),v._v(" "),_("blockquote",[_("p",[v._v("答案：")])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("迭代")]),v._v(" "),_("th",[v._v("u")]),v._v(" "),_("th",[v._v("S")]),v._v(" "),_("th",[v._v("dist[2]")]),v._v(" "),_("th",[v._v("dist[3]")]),v._v(" "),_("th",[v._v("dist[4]")]),v._v(" "),_("th",[v._v("dist[5]")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("初始")]),v._v(" "),_("td",[v._v("-")]),v._v(" "),_("td",[v._v("{1}")]),v._v(" "),_("td",[v._v("5")]),v._v(" "),_("td",[v._v("inf")]),v._v(" "),_("td",[v._v("30")]),v._v(" "),_("td",[v._v("inf")])]),v._v(" "),_("tr",[_("td",[v._v("1")]),v._v(" "),_("td",[v._v("2")]),v._v(" "),_("td",[v._v("{1,2}")]),v._v(" "),_("td",[v._v("-")]),v._v(" "),_("td",[v._v("10")]),v._v(" "),_("td",[v._v("30")]),v._v(" "),_("td",[v._v("inf")])]),v._v(" "),_("tr",[_("td",[v._v("2")]),v._v(" "),_("td",[v._v("3")]),v._v(" "),_("td",[v._v("{1,2,3}")]),v._v(" "),_("td",[v._v("-")]),v._v(" "),_("td",[v._v("-")]),v._v(" "),_("td",[v._v("30")]),v._v(" "),_("td",[v._v("20")])]),v._v(" "),_("tr",[_("td",[v._v("3")]),v._v(" "),_("td",[v._v("5")]),v._v(" "),_("td",[v._v("{1,2,3,5}")]),v._v(" "),_("td",[v._v("-")]),v._v(" "),_("td",[v._v("-")]),v._v(" "),_("td",[v._v("28")]),v._v(" "),_("td",[v._v("-")])]),v._v(" "),_("tr",[_("td",[v._v("4")]),v._v(" "),_("td",[v._v("4")]),v._v(" "),_("td",[v._v("{1,2,3,5,4}")]),v._v(" "),_("td"),v._v(" "),_("td"),v._v(" "),_("td"),v._v(" "),_("td")])])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images51072886-bdb8dc80-16a3-11e9-98c2-5b1b46c02f12.jpg",alt:"2ea7945f000af432aa4c9c480ca76e0"}})])])}),[],!1,null,null,null);_.default=a.exports}}]);