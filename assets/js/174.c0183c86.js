(window.webpackJsonp=window.webpackJsonp||[]).push([[174],{501:function(t,a,r){"use strict";r.r(a);var e=r(12),s=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"一、协议格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、协议格式"}},[t._v("#")]),t._v(" 一、协议格式")]),t._v(" "),a("blockquote",[a("p",[t._v("TCP是传输层协议。一个TCP由"),a("strong",[t._v("四元组")]),t._v("组成【local ip, local port,remote ip,remote port】，其中一个不同都意味着新的TCP连接。TCP的特点是面向连接、可靠传输、流量控制。应用场景是用来做可靠的数据传输，例如HTTP协议、RPC协议等应用层协议是基于TCP进行的数据传输。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images/dev-network-wireshark-1.jpeg",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"二、通信过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、通信过程"}},[t._v("#")]),t._v(" 二、通信过程")]),t._v(" "),a("p",[a("strong",[t._v("三次握手")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images/image-20220905132918924.png",alt:"image-20220905132918924"}})]),t._v(" "),a("p",[a("strong",[t._v("四次挥手")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images/image-20220905132952563.png",alt:"image-20220905132952563"}})]),t._v(" "),a("h2",{attrs:{id:"三、特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、特点"}},[t._v("#")]),t._v(" 三、特点")]),t._v(" "),a("blockquote",[a("p",[t._v("TCP最大的特点就是提供可靠传输，以下几个机制就是保证了其可靠传输的特点。")])]),t._v(" "),a("h3",{attrs:{id:"_3-1-可靠传输"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-可靠传输"}},[t._v("#")]),t._v(" 3.1 可靠传输")]),t._v(" "),a("p",[a("strong",[t._v("超时重传机制")])]),t._v(" "),a("blockquote",[a("p",[t._v("SYN包或者FIN包长时间没接收到ACK包后，会触发超时重传机制，每次重传间隔是上次的两倍。")]),t._v(" "),a("p",[t._v("重传次数可以通过配置操作系统的TCP相关的参数")])]),t._v(" "),a("p",[a("strong",[t._v("ACK机制")])]),t._v(" "),a("blockquote",[a("p",[t._v("TCP提供ACK包确认机制，通过对序列号+1进行确认，确保FIN，SYN包和其他数据传输包被正常接收。")])]),t._v(" "),a("h3",{attrs:{id:"_3-2-流量控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-流量控制"}},[t._v("#")]),t._v(" 3.2 流量控制")]),t._v(" "),a("blockquote",[a("p",[t._v("流量控制是对"),a("strong",[t._v("接收方")]),t._v("接收能力的控制，根据接收方当先负载，调整发送端和接收端的窗口，达到稳定传输的目的。")]),t._v(" "),a("p",[t._v("发送流量 = min(拥塞窗口，滑动窗口)")])]),t._v(" "),a("p",[a("strong",[t._v("滑动窗口")])]),t._v(" "),a("blockquote",[a("p",[t._v("滑动窗口是流量控制的具体实现，分为接收窗口和发送窗口，发送窗口会根据接收窗口进行适用。举个例子：")]),t._v(" "),a("p",[t._v("首先双方经过三次握手建立连接后，初始化各自的窗口大小，均为200字节。此时发送100个TPC包，接收端接收到后由于当前的负载比较大，60个字节进入缓冲队列，那么接收端将窗口大小缩小为140，并且在ACK的时候将配置窗口大小为140，发送端在接收到ACK包后将窗口进行调整。")])]),t._v(" "),a("ul",[a("li",[t._v("发送窗口")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images/image-20220905144651196.png",alt:"image-2022090514651196"}})]),t._v(" "),a("ul",[a("li",[t._v("接收窗口")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images/image-20220905144729756.png",alt:"image-20220905144729756"}})]),t._v(" "),a("h3",{attrs:{id:"_3-3-拥塞控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-拥塞控制"}},[t._v("#")]),t._v(" 3.3 拥塞控制")]),t._v(" "),a("blockquote",[a("p",[t._v("拥塞控制是对"),a("strong",[t._v("发送方")]),t._v("发送的控制，由于在开始传输的时候，TCP并不知道当前的网络情况，如果网络环境很差特别容易丢失，那么就需要控制发送端的发送速度，否则会造成大量丢包重试。")])]),t._v(" "),a("p",[a("strong",[t._v("拥塞窗口")])]),t._v(" "),a("blockquote",[a("p",[t._v("拥塞窗口由四个算法控制")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("慢启动算法：通过从0开始指数增长的方式扩大拥塞窗口，每经过一个RTT窗口进行翻倍，当到达慢启动阈值后（16），采用拥塞避免算法增长。")]),t._v(" "),a("ul",[a("li",[t._v("拥塞避免算法：每经过一个RTT，窗口增加1")])])]),t._v(" "),a("li",[a("p",[t._v("拥塞发生算法：当发现三次重复包的ACK后，说明当前出现了包的丢失，故进行"),a("strong",[t._v("快重传")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("快速恢复算法：当发现三次重复包的ACK后，说明当前网络拥塞，将拥塞阈值和窗口大小调为当前窗口的一半，启动快恢复算法（线程增长）")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images/image-20220905133835874.png",alt:"image-20220905133835874"}})]),t._v(" "),a("h2",{attrs:{id:"四、应用调优"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、应用调优"}},[t._v("#")]),t._v(" 四、应用调优")]),t._v(" "),a("p",[t._v("Socket 编程时，单机最多可以建立多少个 TCP 连接，受到操作系统的影响。Windows 下单机的TCP连接数受多个参数影响：")]),t._v(" "),a("ul",[a("li",[t._v("最大TCP连接数")]),t._v(" "),a("li",[t._v("最大动态端口数")]),t._v(" "),a("li",[t._v("最大TCB数量")]),t._v(" "),a("li",[t._v("最大TCB Hash table数量")])]),t._v(" "),a("h2",{attrs:{id:"五、参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、参考"}},[t._v("#")]),t._v(" 五、参考")]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://juejin.cn/post/6844904070889603085",target:"_blank",rel:"noopener noreferrer"}},[t._v("*参考一"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.pdai.tech/md/develop/protocol/dev-protocol-tool-wireshark.html#%E4%BD%BF%E7%94%A8%EF%BC%9Awireshark%E5%88%86%E6%9E%90tcp%E5%8D%8F%E8%AE%AE%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考二-pdai"),a("OutboundLink")],1)])])])])}),[],!1,null,null,null);a.default=s.exports}}]);