(window.webpackJsonp=window.webpackJsonp||[]).push([[143],{469:function(_,v,t){"use strict";t.r(v);var s=t(12),r=Object(s.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"一、写在前面"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、写在前面"}},[_._v("#")]),_._v(" 一、写在前面")]),_._v(" "),v("h4",{attrs:{id:"为什么要进行数据切分"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么要进行数据切分"}},[_._v("#")]),_._v(" 为什么要进行数据切分：")]),_._v(" "),v("blockquote",[v("p",[_._v("随着互联网应用的广泛普及，海量数据的存储和访问成为了系统设计的瓶颈问题。对于一个大型的互联网应用，每天几十亿的PV无疑对数据库造成了相当高的负载。对于系统的"),v("strong",[_._v("稳定性")]),_._v("和"),v("strong",[_._v("扩展性")]),_._v("造成了极大的问题。通过数据切分来提高网站性能，横向扩展数据层已经成为架构研发人员首选的方式。")])]),_._v(" "),v("h4",{attrs:{id:"数据库优化的策略"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据库优化的策略"}},[_._v("#")]),_._v(" 数据库优化的策略")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("水平切分数据库")]),_._v("，可以降低单台机器的负载，同时最大限度的降低了了宕机造成的损失。")]),_._v(" "),v("li",[_._v("通过"),v("strong",[_._v("负载均衡策略")]),_._v("，有效的降低了单台机器的访问负载，降低了宕机的可能性；")]),_._v(" "),v("li",[_._v("通过"),v("strong",[_._v("集群方案")]),_._v("，解决了数据库宕机带来的单点数据库不能访问的问题；")]),_._v(" "),v("li",[_._v("通过"),v("strong",[_._v("读写分离")]),_._v("策略更是最大限度了提高了应用中读取（Read）数据的速度和并发量。")])]),_._v(" "),v("p"),_._v(" "),v("h2",{attrs:{id:"二、mysql分库分表方案"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、mysql分库分表方案"}},[_._v("#")]),_._v(" 二、MySQL分库分表方案")]),_._v(" "),v("h4",{attrs:{id:"_1、利用merge存储引擎来实现分表-水平分表"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1、利用merge存储引擎来实现分表-水平分表"}},[_._v("#")]),_._v(" 1、利用merge存储引擎来实现分表（水平分表）")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("merge引擎实现MySQL分表，这种方法比较适用于没有事先考虑分表，而随着数据量增大，查询速度减慢的情况")])]),_._v(" "),v("li",[v("p",[_._v("merge的要求：")]),_._v(" "),v("ul",[v("li",[_._v("合并的表使用的必须是"),v("strong",[_._v("MyISAM引擎")])]),_._v(" "),v("li",[_._v("表的结构必须一致，包括索引、字段类型、引擎和字符集")])])]),_._v(" "),v("li",[v("p",[_._v("示例")])])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images13104102_slb1.jpg",alt:"image"}})]),_._v(" "),v("p"),_._v(" "),v("h4",{attrs:{id:"_2、简单的mysql主从复制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2、简单的mysql主从复制"}},[_._v("#")]),_._v(" 2、简单的MySQL主从复制")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("MySQL的主从复制解决了数据库的"),v("strong",[_._v("读写分离")]),_._v("，并很好的提升了读的性能")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("主数据库负责写，从数据库负责读")]),_._v("，主库写入数据后会同步到从库\n"),v("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images13104102_nxBO.jpg",alt:"image"}})])])]),_._v(" "),v("li",[v("p",[_._v("仍存在的问题：")]),_._v(" "),v("ul",[v("li",[_._v("写入无法"),v("strong",[_._v("扩展")]),_._v("和"),v("strong",[_._v("缓存")])]),_._v(" "),v("li",[_._v("主从的数据复制存在延迟")]),_._v(" "),v("li",[_._v("锁表率上升")]),_._v(" "),v("li",[_._v("表变大，缓存率下降")])])])]),_._v(" "),v("p"),_._v(" "),v("h4",{attrs:{id:"_3、mysql垂直分区"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3、mysql垂直分区"}},[_._v("#")]),_._v(" 3、MySQL垂直分区")]),_._v(" "),v("ul",[v("li",[_._v("如果业务足够独立，可以将不同业务的数据垂直切割到不同的数据库，起到"),v("strong",[_._v("负载分流")]),_._v("的作用，大大提升了数据库的"),v("strong",[_._v("吞吐能力")]),_._v("，垂直切割如下图\n"),v("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images13104103_CHZw.jpg",alt:"image"}})])]),_._v(" "),v("p"),_._v(" "),v("h4",{attrs:{id:"_4、mysql水平分片-sharding"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4、mysql水平分片-sharding"}},[_._v("#")]),_._v(" 4、MySQL水平分片（sharding）")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("切片方式：")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("物理切片")]),_._v("：通过路由规则访问特定的数据库")]),_._v(" "),v("li",[v("strong",[_._v("数据切片")]),_._v(": 对数据进行一系列的切分规则，将数据分布到数据库的不同表中")])])])]),_._v(" "),v("p"),_._v(" "),v("ul",[v("li",[v("strong",[_._v("基于水平分片的三种分库方式和规则")]),_._v(" "),v("ul",[v("li",[v("p",[v("strong",[_._v("按号段分")]),_._v("：如user_id的1~1000对应DB1，1001~200对应DB2...")]),_._v(" "),v("ul",[v("li",[_._v("优点：可迁移部分数据")]),_._v(" "),v("li",[_._v("缺点：数据分布不均匀")])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("hash取摸分")]),_._v("：对user_id的哈希进行取模（如hash(user_id) % n），n为要分的数据库数量")]),_._v(" "),v("ul",[v("li",[_._v("优点：数据分布均匀")]),_._v(" "),v("li",[_._v("缺点：数据迁移的时候比较麻烦，不能按机器性能分摊数据")])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("在认证库中保存数据库配置")]),_._v("：建立一个DB，这个DB单独保存user_id到数据库的映射关系，每次访问的时候都先查询下认证库，从而得到user_id存储的DB信息。")]),_._v(" "),v("ul",[v("li",[_._v("优点：灵活性强，一对一的关系")]),_._v(" "),v("li",[_._v("缺点：每次查询都需要先进行一次查询，性能大打折扣")])])])])])]),_._v(" "),v("p"),_._v(" "),v("ul",[v("li",[v("p",[v("strong",[_._v("分布式数据方案提供功能如下")]),_._v("：")]),_._v(" "),v("ol",[v("li",[_._v("提供"),v("strong",[_._v("分库规则")]),_._v("和"),v("strong",[_._v("路由规则")]),_._v("（RouteRule简称RR），可将上面提供的三种分片规则直接内嵌入系统。")]),_._v(" "),v("li",[_._v("引入"),v("strong",[_._v("集群")]),_._v("（Group）概念，保证数据的高可用性。")]),_._v(" "),v("li",[_._v("引入"),v("strong",[_._v("负载均衡策略")]),_._v("（LocalBalancePollcy，简称LB）")]),_._v(" "),v("li",[_._v("引入"),v("strong",[_._v("集群节点可用性探测机制")]),_._v("，对单点机器的可用性进行定时的定制，以保障LB策略的正确实施，确保系统的"),v("strong",[_._v("高度稳定性")]),_._v("。")]),_._v(" "),v("li",[_._v("引入"),v("strong",[_._v("读写分离")]),_._v("，提高数据的"),v("strong",[_._v("查询速度")]),_._v("。")])])])]),_._v(" "),v("p"),_._v(" "),v("ul",[v("li",[v("p",[v("strong",[_._v("哈希取模分片简介")]),_._v("：")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("将用户按照一定的规则**（按ID哈希）"),v("strong",[_._v("分组，并把该用户的数据存储到一个")]),_._v("数据库分片**中，即一个sharding，随着用户的增加，只需要简单的配置一台服务器即可。原理如下图：\n"),v("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images13104104_2qZP.jpg",alt:"image"}})])]),_._v(" "),v("li",[v("p",[_._v("获取分片存储的信息如下（先创建一张"),v("strong",[_._v("用户和shard")]),_._v("对应的数据表，用于查找用户的shard id，再从对应shard id查找相关数据）：\n"),v("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images13104105_7oa0.jpg",alt:"image"}})])])])])]),_._v(" "),v("p"),_._v(" "),v("h4",{attrs:{id:"_5、对冷热数据的处理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5、对冷热数据的处理"}},[_._v("#")]),_._v(" 5、对冷热数据的处理")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("举例：在一个博客系统中，文章标题，作者，分类，创建时间等，是变化频率慢，查询次数多，而且最好有很好的实时性的数据，我们把它叫做"),v("strong",[_._v("冷数据")]),_._v("。而博客的浏览量，回复数等，类似的统计信息，或者别的变化频率比较高的数据，我们把它叫做"),v("strong",[_._v("活跃数据")]),_._v("。")])]),_._v(" "),v("li",[v("p",[_._v("处理方法：")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("存储引擎")]),_._v("的使用不同，冷数据使用"),v("strong",[_._v("MyIsam")]),_._v("可以有更好的查询数据。活跃数据，可以使用"),v("strong",[_._v("Innodb")]),_._v(" ,可以有更好的更新速度。")]),_._v(" "),v("li",[_._v("对冷数据进行更多的"),v("strong",[_._v("从库配置")]),_._v("，因为更多的操作是查询，这样来加快查询速度。对热数据，可以相对有更多的主库的"),v("strong",[_._v("横向分表")]),_._v("处理。")]),_._v(" "),v("li",[_._v("对于一些特殊的活跃数据，也可以考虑使用"),v("strong",[_._v("memcache")]),_._v(","),v("strong",[_._v("redis")]),_._v("之类的缓存，等累计到一定量再去更新数据库")])])])]),_._v(" "),v("p"),_._v(" "),v("h4",{attrs:{id:"参考"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[_._v("#")]),_._v(" 参考")]),_._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://www.cnblogs.com/sunny3096/p/8595058.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("参考一"),v("OutboundLink")],1)]),_._v(" "),v("li",[v("a",{attrs:{href:"http://wenku.uml.com.cn/document.asp?fileid=3998&partname=%CA%FD%BE%DD%BF%E2",target:"_blank",rel:"noopener noreferrer"}},[_._v("参考二"),v("OutboundLink")],1),_._v(" (推荐)")])])])}),[],!1,null,null,null);v.default=r.exports}}]);