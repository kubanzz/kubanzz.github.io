(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{399:function(s,t,a){"use strict";a.r(t);var n=a(12),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"一、五大数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、五大数据结构"}},[s._v("#")]),s._v(" 一、五大数据结构")]),s._v(" "),t("h3",{attrs:{id:"string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[s._v("#")]),s._v(" String")]),s._v(" "),t("p",[s._v("（缓存统计数据，提高读性能）")]),s._v(" "),t("blockquote",[t("p",[s._v("Redis的字符串类型的全称是 Simple Dynamic Strings 简称 SDS（简单动态字符串），底层数据结构称为"),t("strong",[s._v("SDS对象")]),s._v("，包括了整形和字符串，底层采用"),t("strong",[s._v("int、emstr、raw")]),s._v("三种数据结构分别对不同长度的字符串申请相应的存储类型，从而有效的节约了空间。常用于页面缓存和整数、浮点类型的存储和计算。")]),s._v(" "),t("ul",[t("li",[s._v("int：整型数据")]),s._v(" "),t("li",[s._v("emstr：字符串并且长度小于44字节")]),s._v(" "),t("li",[s._v("raw：字符串并且长度大于44字节")])])]),s._v(" "),t("p",[s._v("Redis中每个对象都会包含一个redisObject 对象头，该对象头结构如下：")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 总共占用16bytes")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("redisObject")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" type"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 4 bit，对象的数据类型")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" encoding"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 4 bit，对象的数据编码")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" lru"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("LRU_BITS"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3 个字节，最近最少使用信息，内存回收时会用到")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" refcount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 4 个字节，引用计数器")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ptr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 8 个字节，对象指针，指向具体的内容")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" robj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("除了redisObject对象头外，SDS对象还包含自己的数据结构，包括已使用长度、总长度等属性，减完用于存储数据的内存就剩下44bytes。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/imagesimage-20220807225006177.png",alt:"image-20220807225006177"}})]),s._v(" "),t("p",[s._v("常用场景：")]),s._v(" "),t("ul",[t("li",[s._v("页面数据缓存：减少数据库操作，提供性能")]),s._v(" "),t("li",[s._v("数字计算与统计：原子性操作")]),s._v(" "),t("li",[s._v("共享数据：如Session共享")]),s._v(" "),t("li",[s._v("分布式锁：原子性set")])]),s._v(" "),t("p",[s._v("常用的指令：")]),s._v(" "),t("ul",[t("li",[s._v("set k1 1000  val1")]),s._v(" "),t("li",[s._v("incrby k3 5：对k3的值+5")]),s._v(" "),t("li",[s._v("incr k1：对k1对值自增")])]),s._v(" "),t("h3",{attrs:{id:"字典"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字典"}},[s._v("#")]),s._v(" 字典")]),s._v(" "),t("blockquote",[t("p",[s._v("字典类型 (Hash) 又被成为散列类型或者是哈希表类型，它是将一个键值 (key) 和一个特殊的"),t("strong",[s._v("哈希表")]),s._v("关联起来，这个哈希表表包含两列数据："),t("strong",[s._v("字段和值")]),s._v("。哈希表底层是基于"),t("strong",[s._v("数组+链表")]),s._v("的数据结构实现，数组用于存储元素，链表用于处理哈希冲突。")])]),s._v(" "),t("ul",[t("li",[s._v("参考："),t("a",{attrs:{href:"https://juejin.cn/post/6987016272143712263",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考一"),t("OutboundLink")],1)])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main//images/image-20220901142721327.png",alt:"image-20220901142721327"}})]),s._v(" "),t("p",[s._v("Redis中的字典底层基于哈希表实现")]),s._v(" "),t("ul",[t("li",[s._v("ht：包含两个哈希表h0和h1，h1只有在rehash的时候被分配空间使用。\n"),t("ul",[t("li",[s._v("dicht：\n"),t("ul",[t("li",[s._v("table：哈希表包含key和value，底层采用"),t("strong",[s._v("数组+链表")]),s._v("的方式进行存储，数组用于哈希索引查找元素存储，链表用于解决哈希冲突问题。")]),s._v(" "),t("li",[s._v("size：当前的哈希表中的大小")]),s._v(" "),t("li",[s._v("sizemask：用于哈希计算下标索引")]),s._v(" "),t("li",[s._v("used：当前的元素大小")])])])])]),s._v(" "),t("li",[s._v("rehashidx：记录当前rehash的下标，-1表示没有开启rehash，其他表示正在rehash")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/imagesba21aa268514476dac59388ea1fb7089~tplv-k3u1fbpfcp-zoom-in-crop-mark%3A3024%3A0%3A0%3A0.awebp",alt:"img"}})]),s._v(" "),t("blockquote",[t("p",[s._v("渐进式扩容：")]),s._v(" "),t("p",[s._v("由于Redis是采用单线程进行任务处理的，如果同时大数据量的字典的rehash，会导致服务很长时间无法提供服务，为了避免这种情况的发生，Redis采用渐进式rehash的方式。当需要进行扩容操作时，为h1分配内存空间，并且将字典的rehashidx置为0，增量式的将h0的元素rehash到h1，每完成一个rehashidx+1，直到所有元素都被rehash到h1中。在此过程中，get操作会在h0和h1之间进行查找，put操作会直接put到h1，当完成h0的rehash后，将h0指向h1，将h1置为null。该思想类似于写时复制的思想，例如Java中的CopyOnWriteArrayList。")]),s._v(" "),t("p",[s._v("源码：（dict.c）")])]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("dictExpand")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("dict "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("d"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 需要的容量小于当前容量，则不需要扩容 */")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("dictIsRehashing")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("d"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" d"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("ht"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("used "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" DICT_ERR"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n dictht n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" realsize "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("_dictNextPower")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 重新计算扩容后的值")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 计算新的扩容大小等于当前容量，不需要扩容 */")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("realsize "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" d"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("ht"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" DICT_ERR"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 分配一个新的哈希表，并将所有指针初始化为NULL */")]),s._v("\n n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("size "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" realsize"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sizemask "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" realsize"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("table "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("zcalloc")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("realsize"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("sizeof")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("dictEntry"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("used "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("d"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("ht"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("table "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 第一次初始化")]),s._v("\n     d"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("ht"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" DICT_OK"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n d"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("ht"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 把增量输入放入新 ht[1] 中")]),s._v("\n d"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("rehashidx "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 非默认值 -1，表示需要进行 rehash")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" DICT_OK"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("p",[s._v("常用场景：")]),s._v(" "),t("ul",[t("li",[s._v("存储用户信息")]),s._v(" "),t("li",[s._v("存储用户购物车信息")]),s._v(" "),t("li",[s._v("存储服务区的基础信息")])]),s._v(" "),t("h3",{attrs:{id:"list"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[s._v("#")]),s._v(" List")]),s._v(" "),t("blockquote",[t("p",[s._v("Redis中的List结构是一个有序链表，底层采用**ziplist（压缩列表）"),t("strong",[s._v("和")]),s._v("quicklist（快速列表）**实现，当元素比较少的时候，采用ziplist存储，ziplist会开辟一块连续的内存块，减少元素前后指针带来的内存消耗。如果元素比较多，则采用将ziplist转化为qickklist并采用双向链表存储，而qucklistNode本质上就是一个ziplist。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/images2020-02-28-31230.png",alt:"列表类型使用-quicklist结构图.png"}})]),s._v(" "),t("p",[s._v("ziplist结构")]),s._v(" "),t("ul",[t("li",[s._v("zlbytes：压缩列表字节长度，占 4 字节")]),s._v(" "),t("li",[s._v("zllen：压缩列表的元素个数")]),s._v(" "),t("li",[s._v("entryX：压缩列表存储的所有元素，可以是字节数组或者是整数")]),s._v(" "),t("li",[s._v("zlend：压缩列表的结尾，占 1 字节")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/images2020-02-28-031231.png",alt:"列表类型使用-压缩列表结构图.png"}})]),s._v(" "),t("p",[s._v("quicklist添加元素的过程：")]),s._v(" "),t("p",[s._v("我的理解是，会先判断当前是否为ziplist存储，如果是就在头节点插入，否则创建新的quicklistNode插入。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/images2020-02-28-031232.png",alt:"列表类型使用-插入流程图.png"}})]),s._v(" "),t("p",[s._v("常用场景：")]),s._v(" "),t("ul",[t("li",[s._v("消息队列：lpush、rpop可以实现左进右出")]),s._v(" "),t("li",[s._v("文章列表：对于博客站点来说，当用户和文章都越来越多时，为了加快程序的响应速度，我们可以把用户自己的文章存入到 List 中，因为 List 是有序的结构，所以这样又可以完美的实现分页功能，从而加速了程序的响应速度。")])]),s._v(" "),t("p",[s._v("常用指令：")]),s._v(" "),t("ul",[t("li",[s._v("查找指定区间元素：lrange key start stop（-1代表到结尾）")]),s._v(" "),t("li",[s._v("从链表左边添加元素：lpush key value1")]),s._v(" "),t("li",[s._v("从链表右边取出元素：rpop key")])]),s._v(" "),t("h3",{attrs:{id:"sortedset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sortedset"}},[s._v("#")]),s._v(" SortedSet")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://juejin.cn/post/6983810713055658015#heading-13",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考一"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/Redis%20%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E6%88%98/14%20%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.md",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考二"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://juejin.cn/post/6844903446475177998#heading-8",target:"_blank",rel:"noopener noreferrer"}},[s._v("*参考三"),t("OutboundLink")],1)])]),s._v(" "),t("blockquote",[t("p",[s._v("SortedSet是一个有序集合，其存储元素相当于由两个值组成的，一个是集合的元素值，一个是排序值。有序集合"),t("strong",[s._v("ZSet")]),s._v("底层采用 "),t("strong",[s._v("ziplist（压缩链表）"),t("strong",[s._v("或")]),s._v("字典（哈希）")]),s._v("+ "),t("strong",[s._v("zskiplist (跳跃表)")]),s._v(" 组成的。元素数量小于128并且长度都小于64字节，则采用压缩链表，否则采用字典+跳跃表。与Java中的HashMap的链表转红黑树的思想类似，n值比较小时以时间换空间，因为时间可控，n大于某个阈值，则采用空间换时间策略。")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("压缩链表："),t("a",{attrs:{href:"https://juejin.cn/post/6844903438510194695",target:"_blank",rel:"noopener noreferrer"}},[s._v("ziplist"),t("OutboundLink")],1),s._v("是一个经过特殊编码的双向链表，它的设计目标就是为了节约内存，但是查找需要顺序查找，即时间复杂度为O(n)。")])]),s._v(" "),t("li",[t("p",[s._v("字典表：key-vale对应obj-score，查找某元素的排序的时候，可以先通过字典表查找到score，再通过跳表查询对应的元素。")])]),s._v(" "),t("li",[t("p",[s._v("跳表：zskiplist包含头指针和尾指针zskiplistNode，分别指向元素头节点和尾节点，并且包含length和level属性。")]),s._v(" "),t("ul",[t("li",[s._v("length属性：元素个数")]),s._v(" "),t("li",[s._v("level属性：该跳表最大的层数")]),s._v(" "),t("li",[s._v("zskiplistNode：即元素，zskiplistNode包含object、score及level数组，每个元素生成的时候会根据Redis提供的算法随机生成level，level即元素的层数（比如7即代表该元素在1-7层），各个层数通过指针形成单向链表。在Redis中level的最大长度为32")])])])]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// level随机生成算法如下，从概率学上，其保证了产生越高的层数概率越低，保证平均时间为log(n)")]),s._v("\nMaxLevel "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("32")]),s._v("\np "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.25")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("randomLevel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    level "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// random()返回一个[0...1)的随机数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("random")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" p and level "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" MaxLevel "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n        level "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" level "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" level\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/imagesb9c4c86dd4b74d0fbfc2619e6d319f74~tplv-k3u1fbpfcp-zoom-in-crop-mark%3A3024%3A0%3A0%3A0.awebp",alt:"image-20210705150306846"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/images9b97ffa5afac0f5f3ba7.png~tplv-t2oaga2asx-zoom-crop-mark%3A3024%3A3024%3A3024%3A1702.awebp",alt:"Redis 为什么用跳表而不用平衡树？"}})]),s._v(" "),t("blockquote",[t("p",[s._v("skiplist（跳表）的实现原理：")]),s._v(" "),t("p",[s._v("跳表是一种可以进行二分查找的有序链表，底层实现是在原有的"),t("strong",[s._v("有序链表")]),s._v("上面增加了"),t("strong",[s._v("多级索引")]),s._v("，通过索引来实现快速查找，其查找、插入、删除的时间复杂度都为log(n)，因为需要维护索引。跳表的特点是效率高、实现简单。查找过程是"),t("strong",[s._v("从上层索引往下查找，每次都找到最后一个小于查找值的元素，然后往下级索引查找，直到找到元素")]),s._v("。在Redis中，有序集合中对socre进行排序存储，涉及到对有序列表的查询，故采用跳表。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/imagesimages2020-02-28-031228.png",alt:"有序集合-跳跃表.png"}})])]),s._v(" "),t("blockquote",[t("p",[s._v("Redis为什么用skiplist而不用平衡树？（来自Redis的作者）")]),s._v(" "),t("ol",[t("li",[s._v("内存占用上跳表更可控，可以通过设置maxlevel控制索引层数。")]),s._v(" "),t("li",[s._v("性能上跳表拥有跟其他平衡树类差不多的性能。")]),s._v(" "),t("li",[s._v("实现难度上跳表逻辑及实现更加简单。")])])]),s._v(" "),t("p",[s._v("常用的应用场景：")]),s._v(" "),t("ul",[t("li",[s._v("学生成绩排名")]),s._v(" "),t("li",[s._v("粉丝列表，根据关注的先后时间排序")])]),s._v(" "),t("p",[s._v("常用的指令有：")]),s._v(" "),t("ul",[t("li",[s._v("添加元素："),t("code",[s._v("zadd key 5 redis 10 java")])]),s._v(" "),t("li",[s._v("查找区间元素："),t("code",[s._v("zrange key minscore maxscore")])]),s._v(" "),t("li",[s._v("查找元素排序（索引）："),t("code",[s._v("zrank key redis")])]),s._v(" "),t("li",[s._v("查找元素分数："),t("code",[s._v("zscore key redis")])])]),s._v(" "),t("h3",{attrs:{id:"set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[s._v("#")]),s._v(" Set")]),s._v(" "),t("blockquote",[t("p",[s._v("Set是一个无序集合，其存储的元素都是唯一的，不会有重复元素。Set底层采用"),t("strong",[s._v("intset (整数集合)")]),s._v(" 或 "),t("strong",[s._v("字段表 (普通哈希表)")]),s._v(" 进行存储，"),t("strong",[s._v("只有在元素都为整数，并且元素数量小于512的时候使用intset")]),s._v("，其他的采用HashTable（key为值，value为null）。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/images/image-20220901152730310.png",alt:"image-20220901152730310"}})]),s._v(" "),t("blockquote",[t("p",[t("a",{attrs:{href:"https://blog.csdn.net/ldw201510803006/article/details/123515390",target:"_blank",rel:"noopener noreferrer"}},[s._v("insert和hashtable的区别"),t("OutboundLink")],1),s._v("：inset底层采用有序整数存储，时间复杂度上查找元素为logn（二分查找），增加和删除为On（需要移动元素），而hashtable都是O1，时间上hashtable快于inset，而空间上inset优于hashtable（key-value存储，value为null），所以inset是一种时间换空间的结构。")]),s._v(" "),t("p",[s._v("源码：（t_set.c）")])]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* \n * 添加元素到集合\n * 如果当前值已经存在，则返回 0 不作任何处理，否则就添加该元素，并返回 1。\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setTypeAdd")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("robj "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("subject"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" sds value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" llval"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("subject"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("encoding "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" OBJ_ENCODING_HT"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 字典类型")]),s._v("\n        dict "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ht "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" subject"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("ptr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        dictEntry "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("de "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("dictAddRaw")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ht"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("de"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 把 value 作为字典到 key，将 Null 作为字典到 value，将元素存入到字典")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("dictSetKey")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ht"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("de"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sdsdup")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("dictSetVal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ht"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("de"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("subject"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("encoding "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" OBJ_ENCODING_INTSET"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// inset 数据类型")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isSdsRepresentableAsLongLong")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("llval"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" C_OK"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint8_t")]),s._v(" success "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            subject"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("ptr "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("intsetAdd")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("subject"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("ptr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("llval"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("success"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("success"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 超过 inset 的最大存储数量，则使用字典类型存储")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("intsetLen")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("subject"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("ptr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" server"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("set_max_intset_entries"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setTypeConvert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("subject"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("OBJ_ENCODING_HT"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 转化为整数类型失败，使用字典类型存储")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setTypeConvert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("subject"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("OBJ_ENCODING_HT"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n            "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("serverAssert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("dictAdd")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("subject"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("ptr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sdsdup")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" DICT_OK"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 未知编码(类型)")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("serverPanic")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Unknown set encoding"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br")])]),t("p",[s._v("常见的应用场景有：")]),s._v(" "),t("ul",[t("li",[s._v("用户标签：可以基于"),t("code",[s._v("sunion")]),s._v("指令获取用户间的共同爱好")]),s._v(" "),t("li",[s._v("抽奖系统：set可以存储不重复的人员，通过"),t("code",[s._v("spop key nums")]),s._v("可以随机抽取并移除三名人员，"),t("code",[s._v("srandmember key nums")]),s._v("则是随机抽取三人，但是不移除。")])]),s._v(" "),t("p",[s._v("常用的指令有：")]),s._v(" "),t("ul",[t("li",[s._v("交集："),t("code",[s._v("sinter")])]),s._v(" "),t("li",[s._v("并集："),t("code",[s._v("sunion")])]),s._v(" "),t("li",[s._v("错集："),t("code",[s._v("sdiff")])])]),s._v(" "),t("h2",{attrs:{id:"二、特殊数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、特殊数据结构"}},[s._v("#")]),s._v(" 二、特殊数据结构")]),s._v(" "),t("h3",{attrs:{id:"bitmap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bitmap"}},[s._v("#")]),s._v(" Bitmap")]),s._v(" "),t("blockquote",[t("p",[s._v("位图数据结构是一个以位为单位数组，数组中的每个单元只能存0或者1，数组的下标在 Bitmap 中叫做偏移量。特点是可表达内容少，但是占用空间极低，可以用于")]),s._v(" "),t("ul",[t("li",[s._v("统计用户是否在线、是否打卡、是否活跃等")]),s._v(" "),t("li",[s._v("设备是否在线")])])]),s._v(" "),t("p",[t("strong",[s._v("应用")])]),s._v(" "),t("p",[s._v("记录用户打卡，1代表打卡，0代表没打卡")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" setbit sign "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" setbit sign "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" setbit sign "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("查看某天是否打卡")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" getbit sign "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" getbit sign "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("统计操作，统计打卡天数")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" bitcount sign # 统计这周的打卡记录，就可以看到是否有全勤！\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"geospatial-地理位置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#geospatial-地理位置"}},[s._v("#")]),s._v(" geospatial （地理位置）")]),s._v(" "),t("blockquote",[t("p",[s._v("Redis 在 Redis 3.2 版本推出的数据结构! 这个功能可以推算地理位置的信息: 两地之间的距离, 方圆几里的人")])]),s._v(" "),t("p",[s._v("待补充")])])}),[],!1,null,null,null);t.default=e.exports}}]);