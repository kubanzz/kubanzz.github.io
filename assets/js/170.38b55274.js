(window.webpackJsonp=window.webpackJsonp||[]).push([[170],{497:function(n,s,t){"use strict";t.r(s);var a=t(12),e=Object(a.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h2",{attrs:{id:"一、分治法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、分治法"}},[n._v("#")]),n._v(" 一、分治法")]),n._v(" "),s("h3",{attrs:{id:"分治法思想"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分治法思想"}},[n._v("#")]),n._v(" 分治法思想")]),n._v(" "),s("ol",[s("li",[s("p",[n._v("将要解决的"),s("strong",[n._v("较大规模的问题")]),n._v("不断地"),s("strong",[n._v("分割成更小规模")]),n._v("的子问题，直到能够很容易地得到"),s("strong",[n._v("子问题")]),n._v("的解。")])]),n._v(" "),s("li",[s("p",[n._v("对小规模的问题进行"),s("strong",[n._v("求解")])])]),n._v(" "),s("li",[s("p",[n._v("将小问题的解"),s("strong",[n._v("合并")]),n._v("为一个更大规模的问题的解，由子问题逐步求出原来问题的解。")])]),n._v(" "),s("li",[s("p",[n._v("分治法是"),s("strong",[n._v("自顶向下")]),n._v("的分解问题")])])]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.zhihu.com/question/27363814",target:"_blank",rel:"noopener noreferrer"}},[n._v("参考"),s("OutboundLink")],1)])]),n._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images51066663-7bad7d80-1646-11e9-80b9-fd7c065af843.png",alt:"1"}})]),n._v(" "),s("p"),n._v(" "),s("h3",{attrs:{id:"分治法的使用条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分治法的使用条件"}},[n._v("#")]),n._v(" 分治法的使用条件")]),n._v(" "),s("p",[s("strong",[n._v("1. 原问题可分割成k个子问题，1<k<=n")])]),n._v(" "),s("p",[s("strong",[n._v("2. 这些子问题都可解")])]),n._v(" "),s("p",[s("strong",[n._v("3. 可利用这些子问题求出原问题的解")])]),n._v(" "),s("p"),n._v(" "),s("h3",{attrs:{id:"分治法的例子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分治法的例子"}},[n._v("#")]),n._v(" 分治法的例子")]),n._v(" "),s("p",[s("strong",[n._v("棋盘覆盖问题：")])]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.jianshu.com/p/97b09ef06735",target:"_blank",rel:"noopener noreferrer"}},[n._v("参考"),s("OutboundLink")],1)])]),n._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images51068585-0e581780-165b-11e9-942b-1dbb714d6f85.jpeg",alt:"default"}})]),n._v(" "),s("p"),n._v(" "),s("p",[s("strong",[n._v("归并排序：")])]),n._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images51070213-a7495b80-1678-11e9-9316-4c87bae34ad7.gif",alt:"849589-20171015230557043-37375010"}})]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v(' \n#include <stdlib.h>\n#include <stdio.h>\n \nvoid Merge(int sourceArr[],int tempArr[], int startIndex, int midIndex, int endIndex)\n{\n    int i = startIndex, j=midIndex+1, k = startIndex;\n    while(i!=midIndex+1 && j!=endIndex+1)\n    {\n        if(sourceArr[i] > sourceArr[j])\n            tempArr[k++] = sourceArr[j++];\n        else\n            tempArr[k++] = sourceArr[i++];\n    }\n    while(i != midIndex+1)\n        tempArr[k++] = sourceArr[i++];\n    while(j != endIndex+1)\n        tempArr[k++] = sourceArr[j++];\n    for(i=startIndex; i<=endIndex; i++)\n        sourceArr[i] = tempArr[i];\n}\n \n//内部使用递归\nvoid MergeSort(int sourceArr[], int tempArr[], int startIndex, int endIndex)\n{\n    int midIndex;\n    if(startIndex >= endIndex)   return;    // 解决一个元素的问题\n    midIndex = (startIndex + endIndex) / 2;     //中间点作为分割点\n    MergeSort(sourceArr, tempArr, startIndex, midIndex);    // 分治解决问题1\n    MergeSort(sourceArr, tempArr, midIndex+1, endIndex);    // 分治解决问题2\n    Merge(sourceArr, tempArr, startIndex, midIndex, endIndex);    //合并a[left:mid], a[mid+1, right]\n}\n \nint main(int argc, char * argv[])\n{\n    int a[8] = {50, 10, 20, 30, 70, 40, 80, 60};\n    int i, b[8];\n    MergeSort(a, b, 0, 7);\n    for(i=0; i<8; i++)\n        printf("%d ", a[i]);\n    printf("\\n");\n    return 0;\n}\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br")])]),s("p"),n._v(" "),s("h2",{attrs:{id:"二、递归"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、递归"}},[n._v("#")]),n._v(" 二、递归")]),n._v(" "),s("h3",{attrs:{id:"递归算法的定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#递归算法的定义"}},[n._v("#")]),n._v(" 递归算法的定义")]),n._v(" "),s("ol",[s("li",[s("p",[n._v("直接或间接地调用自身的算法称为"),s("strong",[n._v("递归算法")])])]),n._v(" "),s("li",[s("p",[n._v("用函数自身给出定义的函数称为"),s("strong",[n._v("递归函数")])])]),n._v(" "),s("li",[s("p",[n._v("使用被定义对象的自身来为其下定义称为"),s("strong",[n._v("递归定义")])])]),n._v(" "),s("li",[s("p",[s("strong",[n._v("边界条件")]),n._v("和"),s("strong",[n._v("递归方法")]),n._v("是递归函数的二要素")])])]),n._v(" "),s("p"),n._v(" "),s("h3",{attrs:{id:"递归举例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#递归举例"}},[n._v("#")]),n._v(" 递归举例")]),n._v(" "),s("p",[s("strong",[n._v("Fibonacci数列（斐波那契数）：")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("//第n个Fibonacci数可递归地计算如下：\n\nint fibonacci(int n)\n   {\n       if (n <= 1) return 1;\n       return fibonacci(n-1)+fibonacci(n-2);\n   }\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p"),n._v(" "),s("p",[s("strong",[n._v("Ackerman（阿克曼函数）：")])]),n._v(" "),s("ul",[s("li",[n._v("Ackerman函数是一个"),s("strong",[n._v("双递归函数")]),n._v("，当一个函数以及它的一个变量是由"),s("strong",[n._v("函数自身定义")]),n._v("时，称为双递归函数。")])]),n._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images51067525-12ca0380-164e-11e9-808e-17e1e0105499.png",alt:"2"}})]),n._v(" "),s("p"),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("int ackerman(int n,int m){\n\tint F;\n\tif(n==1 && m==0)\n\t\tF = 2;\n\telse if(n==0 && m>=0)\n\t\tF = 1;\n\telse if(n>=2 && m==0)\n\t\tF = n+2;\n\telse\n\t\tF = ackerman(ackerman(n-1,m),m-1);\n\treturn F;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("p"),n._v(" "),s("p",[s("strong",[n._v("全排列：")])]),n._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images51067919-b963d380-1651-11e9-9e4b-2893833559c3.gif",alt:"1347841576_1926"}})]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('void perm(int m) {\n\tif(m==0){\n\t\tfor(int i=0;i<arr.length;i++){\n\t\t\tSystem.out.print(arr[i]+" ");\n\t\t}\n\t\tSystem.out.println();\n\t\treturn;\n\t}\n\telse{\n\t\tfor(int i=0;i<arr.length;i++){\n\t\t\tif(arr[i]==0){\n\t\t\t\tarr[i] = m;\n\t\t\t\tperm(m-1);\n\t\t\t\tarr[i] = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br")])]),s("p"),n._v(" "),s("h3",{attrs:{id:"整数划分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#整数划分"}},[n._v("#")]),n._v(" 整数划分")]),n._v(" "),s("blockquote",[s("p",[n._v("找到正整数n的划分个数\n将最大加数不大于m的划分个数记作q(n,m)")])]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/hoodlum1980/archive/2008/10/11/1308493.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("参考"),s("OutboundLink")],1)])]),n._v(" "),s("p",[s("img",{attrs:{src:"https://user-images.githubusercontent.com/38284818/51068033-3c395e00-1653-11e9-9462-d279c66c7fb3.png",alt:"3"}})]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("\n/**\n例如正整数6有如下11种不同的划分：\n    6；\n    5+1；\n    4+2，4+1+1；\n    3+3，3+2+1，3+1+1+1；\n    2+2+2，2+2+1+1，2+1+1+1+1；\n    1+1+1+1+1+1。\n**/\n\nunsigned long  GetPartitionCount(int n, int max)\n{\n    if (n == 1 || max == 1)\n        return 1;\n    else if (n < max)\n        return GetPartitionCount(n, n);\n    else if (n == max)\n        return 1 + GetPartitionCount(n, max-1);\n    else\n        return GetPartitionCount(n,max-1) + GetPartitionCount(n-max, max);\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br")])]),s("p"),n._v(" "),s("h3",{attrs:{id:"hanoi塔问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hanoi塔问题"}},[n._v("#")]),n._v(" Hanoi塔问题")]),n._v(" "),s("blockquote",[s("p",[n._v("设A,B,C是3个塔座\n开始时，在塔座A上有一叠共n个圆盘，这些圆盘自下而上，由大到小地叠在一起\n各圆盘从小到大编号为1,2,…,n\n现要求将塔座A上的这一叠圆盘移到塔座B上，并仍按同样顺序叠置")]),n._v(" "),s("p",[n._v("规则1：每次只能移动1个圆盘\n规则2：任何时刻都不允许将较大的圆盘压在较小的圆盘之上\n规则3：在满足移动规则1和2的前提下，可将圆盘移至A,B,C中任一塔座上")])]),n._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images51068221-fa5de700-1655-11e9-9139-cc133c2e324b.png",alt:"4"}})]),n._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images51068343-aeac3d00-1657-11e9-9010-bfd86c1fdbe6.gif",alt:"tower_of_hanoi"}})]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("void hanoi(int n, int a, int b, int c) {\n   if (n > 0) {\n\t  hanoi(n-1, a, c, b);\n\t  move(a,b);\n\t  hanoi(n-1, c, b, a);\n   }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);