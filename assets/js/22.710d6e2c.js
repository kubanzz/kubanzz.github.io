(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{349:function(a,s,t){"use strict";t.r(s);var e=t(12),n=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"一、原子性操作方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、原子性操作方法"}},[a._v("#")]),a._v(" 一、原子性操作方法")]),a._v(" "),s("h4",{attrs:{id:"_1-1-同步锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-同步锁"}},[a._v("#")]),a._v(" 1.1 同步锁")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v(" synchronized (this){\n   ++ count;\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h4",{attrs:{id:"_1-2-atomic类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-atomic类"}},[a._v("#")]),a._v(" 1.2 Atomic类")]),a._v(" "),s("ul",[s("li",[a._v("Atomic底层利用CAS实现，而CAS则是利用"),s("strong",[a._v("UnSafe类（native） + 反射技术")]),a._v("实现，通过"),s("code",[a._v("do...while（自旋）")]),a._v("的模式，每次都会检查变量是否被修改过，修改过则while成立并重做。")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("private AtomicLong acount = new AtomicLong(0L);\nacount.incrementAndGet();\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("h4",{attrs:{id:"_1-3-longadder类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-longadder类"}},[a._v("#")]),a._v(" 1.3 LongAdder类")]),a._v(" "),s("ul",[s("li",[a._v("LongAdder为JDK8提供的多线程技术类，底层是利用分而治之的思想，即为"),s("strong",[a._v("每个线程分配一个计数副本")]),a._v("，线程之间的副本相互隔离，最终将所有副本相加，多线程下计数速度最快。")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("private LongAdder lacount = new LongAdder();\n// 计数\nlacount.increment();\n// 获取结果\nlacount.sum()\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("h4",{attrs:{id:"_1-4-atomic类实现原理-cas"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-atomic类实现原理-cas"}},[a._v("#")]),a._v(" 1.4 Atomic类实现原理-CAS")]),a._v(" "),s("ul",[s("li",[s("ol",[s("li",[a._v("通过"),s("code",[a._v("Unsafe")]),a._v("获取对象属性"),s("strong",[a._v("偏移量")])])])]),a._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[a._v("利用"),s("code",[a._v("Unsafe")]),a._v("的"),s("strong",[a._v("CMS方法")]),a._v("及获取到的"),s("strong",[a._v("偏移量")]),a._v("实现自增（操作内存）")])])])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('public class LockDemo1 {\n    private volatile int value = 0;\n    // 直接操作内存，修改对象、数组内存等\n    private static Unsafe unsafe;\n    // 获取属性偏移量\n    private static long valueOfferset;\n\n    static {\n        try {\n            //反射技术获取unsafe值\n            Field field = Unsafe.class.getDeclaredField("theUnsafe");\n            field.setAccessible(true);\n            unsafe = (Unsafe)field.get(null);\n\n            // 获取到value属性偏移量（用于定位value属性在内存中的具体地址）\n            valueOfferset = unsafe.objectFieldOffset(LockDemo1.class.getDeclaredField("value"));\n        } catch (NoSuchFieldException | IllegalAccessException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    public void add() {\n        // i++; 在Java层面分为三个步骤\n        // CAS + 循环重试（自旋）\n        int current;\n        do {\n            // 操作耗时的话线程会占用大量的CPU执行时间\n            current = unsafe.getIntVolatile(this, valueOfferset);\n        } while (!unsafe.compareAndSwapInt(this, valueOfferset, current, current + 1));\n        // 执行失败则重试\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        LockDemo1 lockDemo1 = new LockDemo1();\n\n        for (int i = 0; i < 2; i++) {\n            new Thread(() -> {\n                for (int j = 0; j < 10000; j++) {\n                    lockDemo1.add();\n                }\n            }).start();\n        }\n        Thread.sleep(2000L);\n        System.out.println(lockDemo1.value);\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br"),s("span",{staticClass:"line-number"},[a._v("37")]),s("br"),s("span",{staticClass:"line-number"},[a._v("38")]),s("br"),s("span",{staticClass:"line-number"},[a._v("39")]),s("br"),s("span",{staticClass:"line-number"},[a._v("40")]),s("br"),s("span",{staticClass:"line-number"},[a._v("41")]),s("br"),s("span",{staticClass:"line-number"},[a._v("42")]),s("br"),s("span",{staticClass:"line-number"},[a._v("43")]),s("br"),s("span",{staticClass:"line-number"},[a._v("44")]),s("br"),s("span",{staticClass:"line-number"},[a._v("45")]),s("br"),s("span",{staticClass:"line-number"},[a._v("46")]),s("br"),s("span",{staticClass:"line-number"},[a._v("47")]),s("br")])]),s("h2",{attrs:{id:"二、死锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、死锁"}},[a._v("#")]),a._v(" 二、死锁")]),a._v(" "),s("h3",{attrs:{id:"_2-1-死锁的概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-死锁的概念"}},[a._v("#")]),a._v(" 2.1 死锁的概念")]),a._v(" "),s("p",[a._v("在多线程编程中，我们为了防止多线程竞争共享资源而导致数据错乱，都会在操作共享资源之前加上互斥锁，只有成功获得到锁的线程，才能操作共享资源，获取不到锁的线程就只能等待，直到锁被释放。")]),a._v(" "),s("p",[a._v("那么，当两个线程为了保护两个不同的共享资源而使用了两个互斥锁，那么这两个互斥锁应用不当的时候，可能会造成"),s("strong",[a._v("两个线程都在等待对方释放锁")]),a._v("，在没有外力的作用下，这些线程会一直相互等待，就没办法继续运行，这种情况就是发生了"),s("strong",[a._v("死锁")]),a._v("。")]),a._v(" "),s("h3",{attrs:{id:"_2-2-死锁的条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-死锁的条件"}},[a._v("#")]),a._v(" 2.2 死锁的条件")]),a._v(" "),s("h4",{attrs:{id:"互斥条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#互斥条件"}},[a._v("#")]),a._v(" 互斥条件")]),a._v(" "),s("p",[a._v("同一个资源在任何时刻最多只能被一个线程持有")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/imagesimage-20221121000001548.png",alt:"image-20221121000001548"}})]),a._v(" "),s("h4",{attrs:{id:"持有并等待条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#持有并等待条件"}},[a._v("#")]),a._v(" 持有并等待条件")]),a._v(" "),s("p",[a._v("持有锁1的线程会等待锁2，等待过程不会释放自己持有的锁")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/imagesimage-20221121000104137.png",alt:"image-20221121000104137"}})]),a._v(" "),s("h4",{attrs:{id:"不可剥夺条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不可剥夺条件"}},[a._v("#")]),a._v(" 不可剥夺条件")]),a._v(" "),s("p",[a._v("线程A持有的锁只能由自己释放，无法被其他线程释放。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/imagesimage-20221121000403080.png",alt:"image-20221121000403080"}})]),a._v(" "),s("h4",{attrs:{id:"环路等待条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#环路等待条件"}},[a._v("#")]),a._v(" 环路等待条件")]),a._v(" "),s("p",[a._v("即"),s("strong",[a._v("至少需要两个锁资源")]),a._v("，并且存在"),s("strong",[a._v("多线程")]),a._v("抢占，最终形成了环形链。")]),a._v(" "),s("p",[a._v("![image-20221121000611876](/Users/zengbojia/Library/Application Support/typora-user-images/image-20221121000611876.png)")]),a._v(" "),s("h3",{attrs:{id:"_2-3-死锁的排查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-死锁的排查"}},[a._v("#")]),a._v(" 2.3 死锁的排查")]),a._v(" "),s("h4",{attrs:{id:"jps-jstack排查死锁问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jps-jstack排查死锁问题"}},[a._v("#")]),a._v(" jps + jstack排查死锁问题")]),a._v(" "),s("ol",[s("li",[a._v("jps查看当前正运行的java进程")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/images20191005154826933.png",alt:"img"}})]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("jstack + 进程号，可以查看当前的线程栈信息，定位到死锁的位置并进行优化")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/imageswatermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poZW5nemhhb3lhbmcxMjI=,size_16,color_FFFFFF,t_70.png",alt:"img"}})]),a._v(" "),s("h4",{attrs:{id:"jconsole排查死锁问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jconsole排查死锁问题"}},[a._v("#")]),a._v(" jconsole排查死锁问题")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/imagesimage-20221121003502330.png",alt:"image-20221121003502330"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/imagesimage-20221121003520877.png",alt:"image-20221121003520877"}})]),a._v(" "),s("h4",{attrs:{id:"visualvm排查死锁问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#visualvm排查死锁问题"}},[a._v("#")]),a._v(" VisualVM排查死锁问题")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/imagesimage-20221121003610026.png",alt:"image-20221121003610026"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/imagesimage-20221121003632598.png",alt:"image-20221121003632598"}})]),a._v(" "),s("p",[a._v("点击“线程Dump”按钮，dump下堆栈信息，定位产生死锁的代码位置")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/imagesimage-20221121003732116.png",alt:"image-20221121003732116"}})]),a._v(" "),s("h3",{attrs:{id:"_2-4-如何避免死锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-如何避免死锁"}},[a._v("#")]),a._v(" 2.4 如何避免死锁")]),a._v(" "),s("p",[a._v("避免死锁的方式就是打破上面产生死锁的其中一个条件")]),a._v(" "),s("ul",[s("li",[a._v("打破持有并等待条件：超时释放锁")]),a._v(" "),s("li",[a._v("打破不可剥夺条件：可强制释放锁")]),a._v(" "),s("li",[a._v("打破环路等待条件：资源有序分配法")])]),a._v(" "),s("blockquote",[s("p",[a._v("资源有序分配是最常用的方法，即对于需要获取A，B两个锁的所有线程，在代码层面上都通过先获取A锁，再获取B锁，保证不会出现环路。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/PI-KA-CHU/Image-OSS/main/imagesimage-20221121001144961.png",alt:"image-20221121001144961"}})])]),a._v(" "),s("h3",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[a._v("#")]),a._v(" 参考")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/zhengzhaoxiang/p/13977289.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java程序死锁问题定位与解决"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.cn/post/6844904100488806413",target:"_blank",rel:"noopener noreferrer"}},[a._v("如何避免死锁"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=n.exports}}]);