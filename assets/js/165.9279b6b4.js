(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{493:function(v,t,_){"use strict";_.r(t);var s=_(12),e=Object(s.a)({},(function(){var v=this,t=v._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"回溯法的本质"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#回溯法的本质"}},[v._v("#")]),v._v(" 回溯法的本质")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("具有"),t("strong",[v._v("限界函数")]),v._v("的"),t("strong",[v._v("深度优先搜索法")])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("扩展结点")]),v._v("：一个正在产生儿子的结点称为扩展结点")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("活结点")]),v._v("：一个自身已生成但其儿子还没有全部生成的节点称做活结点")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("死结点")]),v._v("：一个所有儿子已经产生的结点称做死结点")])])]),v._v(" "),t("p"),v._v(" "),t("h2",{attrs:{id:"回溯法的例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#回溯法的例子"}},[v._v("#")]),v._v(" 回溯法的例子")]),v._v(" "),t("p",[t("strong",[v._v("0-1背包问题：")])]),v._v(" "),t("blockquote",[t("p",[v._v("一个0-1背包问题定义如下：\nn=3, c=7, w={4,3,2}, v={3,4,3}\n（这个问题可以用回溯法解决，可以用约束函数和限界函数剪枝以提高搜索效率。）")]),v._v(" "),t("p",[v._v("给出：\n搜索该解空间树时，扩展结点访问过程\n最优值和最优解")]),v._v(" "),t("p",[t("strong",[v._v("剪枝的条件：")])]),v._v(" "),t("ul",[t("li",[v._v("目前已有的重量加下个节点的重量超过背包容量，则剪去")]),v._v(" "),t("li",[v._v("剩余的物品的价值补比bestv大，则剪去")])]),v._v(" "),t("p",[t("strong",[v._v("更新bestv的条件：")])]),v._v(" "),t("ul",[t("li",[v._v("当前拓展节点为叶子节点，则更新bestv和bestx")])])]),v._v(" "),t("blockquote",[t("p",[t("strong",[v._v("答案：")])]),v._v(" "),t("p",[v._v("扩展结点访问过程如下："),t("strong",[v._v("初始bestv=0")]),v._v("，下表中的 r 表示剩余的物品的价值，若剩余的价值不比bestv大，则剪去改节点。")])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("t")]),v._v(" "),t("th",[v._v("扩展结点")]),v._v(" "),t("th",[v._v("sw")]),v._v(" "),t("th",[v._v("sv")]),v._v(" "),t("th",[v._v("剪枝函数")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("1")]),v._v(" "),t("td",[v._v("A")]),v._v(" "),t("td",[v._v("0")]),v._v(" "),t("td",[v._v("0")]),v._v(" "),t("td",[v._v("sw+w[t]=0+4<=C")])]),v._v(" "),t("tr",[t("td",[v._v("2")]),v._v(" "),t("td",[v._v("B")]),v._v(" "),t("td",[v._v("4")]),v._v(" "),t("td",[v._v("3")]),v._v(" "),t("td",[v._v("sw+w[t]=4+3<=C")])]),v._v(" "),t("tr",[t("td",[v._v("3")]),v._v(" "),t("td",[v._v("D")]),v._v(" "),t("td",[v._v("7")]),v._v(" "),t("td",[v._v("7")]),v._v(" "),t("td",[v._v("sw+w[t]=7+2>C，剪去H,r=0,r+sv=0+7>bestv")])]),v._v(" "),t("tr",[t("td",[v._v("4")]),v._v(" "),t("td",[v._v("I")]),v._v(" "),t("td",[v._v("7")]),v._v(" "),t("td",[v._v("7")]),v._v(" "),t("td",[v._v("叶子结点，sv>bestv，更新bestv,bestv=sv=7, bestx=[1,1,0]")])]),v._v(" "),t("tr",[t("td",[v._v("2")]),v._v(" "),t("td",[v._v("B")]),v._v(" "),t("td",[v._v("4")]),v._v(" "),t("td",[v._v("3")]),v._v(" "),t("td",[v._v("r=3,r+sv=3+4<=bestv，剪去E")])]),v._v(" "),t("tr",[t("td",[v._v("1")]),v._v(" "),t("td",[v._v("A")]),v._v(" "),t("td",[v._v("0")]),v._v(" "),t("td",[v._v("0")]),v._v(" "),t("td",[v._v("r=7,r+sv=7<=bestv，剪去C")])])])]),v._v(" "),t("blockquote",[t("p",[v._v("最优值为7，即背包中物品最大价值为7\n最优解为[1,1,0]，即物品1，物品2放入背包中")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images51073375-f5775280-16aa-11e9-962c-9b2b4eea1104.jpg",alt:"81f6fd81d62873b7d4497260ef9e385"}})]),v._v(" "),t("p"),v._v(" "),t("p",[t("strong",[v._v("5皇后问题：")])]),v._v(" "),t("blockquote",[t("p",[v._v("使用回溯法解决5皇后问题时，x=[5, 3, 1, 4, 2]是该问题的一个解")]),v._v(" "),t("p",[t("strong",[v._v("问题：")]),v._v("\n假设搜索从t=1, x[t]=5开始，直到找到x =[5, 3, 1, 4, 2]时结束\n按照算法的搜索顺序，给出满足约束条件时，搜索深度t和x[t]的所有值")])]),v._v(" "),t("blockquote",[t("p",[t("strong",[v._v("答案：")]),v._v("\n简写成(t, x[t])的形式：\n(1,5), (2,1), (3,4), (2,2), (3,4), (4,1), (5,3), (2,3), (3,1), (4,4), (5,2)")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontents.com/PI-KA-CHU/Image-OSS/main/images51073903-56eeef80-16b2-11e9-98ba-42b8d94aae6c.jpg",alt:"a7bcd22ee4654a38c001ae4657fd40b"}})])])}),[],!1,null,null,null);t.default=e.exports}}]);